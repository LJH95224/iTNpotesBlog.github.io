(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{503:function(t,s,a){"use strict";a.r(s);var e=a(42),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"使用vue-cli3-0创建一个项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用vue-cli3-0创建一个项目"}},[t._v("#")]),t._v(" 使用Vue-cli3.0创建一个项目")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("课程主要内容")]),a("br"),t._v("\n1、 使用 "),a("strong",[t._v("Vue UI")]),t._v(" 创建、管理项目 "),a("br"),t._v("\n2、 项目结构目录整理 "),a("br"),t._v("\n3、 初始化文件添加 "),a("br"),t._v("\n4、 基本配置讲解 "),a("br"),t._v("\n5、 跨域配置 "),a("br")])]),t._v(" "),a("p",[t._v("vue-cli2.0 和 vue-cli3.0 有天壤之别，主要得益于webpack4的零配置特性，vue-cli3.0 创建一个项目，不再需要我们书写庞杂的 vue webpack 配置，基本可以实现什么都不需要配置，就启动，编译，打包我们的项目。")]),t._v(" "),a("h2",{attrs:{id:"使用-vue-ui创建一个项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-vue-ui创建一个项目"}},[t._v("#")]),t._v(" 使用 Vue UI创建一个项目")]),t._v(" "),a("p",[t._v("Vue UI 是vue-cli提供的一个可视化的项目管理工具。")]),t._v(" "),a("h3",{attrs:{id:"安装vue-cli3-0-打开vue-ui"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装vue-cli3-0-打开vue-ui"}},[t._v("#")]),t._v(" 安装vue-cli3.0 打开vue ui")]),t._v(" "),a("blockquote",[a("p",[t._v("npm install -g @vue/cli")])]),t._v(" "),a("p",[t._v("等待安装成功之后，在命令行输入 "),a("strong",[t._v("vue ui")]),t._v(" 就会自动打开浏览器进入 vue ui页面")]),t._v(" "),a("blockquote",[a("p",[t._v("vue ui")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ vue ui\n🚀  Starting GUI...\n🌠  Ready on http://localhost:8000\n")])])]),a("h3",{attrs:{id:"用vue-ui创建一个新的项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用vue-ui创建一个新的项目"}},[t._v("#")]),t._v(" 用vue ui创建一个新的项目")]),t._v(" "),a("h4",{attrs:{id:"vue-ui-创建一个项目-详情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-ui-创建一个项目-详情"}},[t._v("#")]),t._v(" vue ui 创建一个项目，详情")]),t._v(" "),a("p",[t._v("主要填写的是项目的主要信息，项目名称，包管理器等")]),t._v(" "),a("h4",{attrs:{id:"vue-ui-创建一个项目-预设"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-ui-创建一个项目-预设"}},[t._v("#")]),t._v(" vue ui 创建一个项目，预设")]),t._v(" "),a("p",[t._v("预设就是一套定义好的插件和配置项，你也可以将自己的配置保存成预设，方便以后创建项目使用。（在课程中我们选择的是手动配置项目）")]),t._v(" "),a("h4",{attrs:{id:"vue-ui-创建一个项目-功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-ui-创建一个项目-功能"}},[t._v("#")]),t._v(" vue ui 创建一个项目，功能")]),t._v(" "),a("p",[t._v("在项目创建之后，你仍然可以通过安装插件来增加功能。")]),t._v(" "),a("h5",{attrs:{id:"插件babel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件babel"}},[t._v("#")]),t._v(" 插件Babel")]),t._v(" "),a("p",[t._v("Babel会将ES6,ES7,ES8,ES9的ES代码转换成ES3，ES4，ES5。能够支持低版本的浏览器。")]),t._v(" "),a("h5",{attrs:{id:"插件typescript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件typescript"}},[t._v("#")]),t._v(" 插件TypeScript")]),t._v(" "),a("p",[t._v("添加TypeScript语言的支持")]),t._v(" "),a("h5",{attrs:{id:"progressive-web-app-pwa-support-渐进式移动应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#progressive-web-app-pwa-support-渐进式移动应用"}},[t._v("#")]),t._v(" Progressive Web App(PWA)Support（渐进式移动应用）")]),t._v(" "),a("h5",{attrs:{id:"router"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#router"}},[t._v("#")]),t._v(" Router")]),t._v(" "),a("h5",{attrs:{id:"vuex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[t._v("#")]),t._v(" VueX")]),t._v(" "),a("h5",{attrs:{id:"css-pre-processors-css预处理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-pre-processors-css预处理器"}},[t._v("#")]),t._v(" CSS Pre-processors （CSS预处理器）")]),t._v(" "),a("p",[t._v("Sass和less")]),t._v(" "),a("h5",{attrs:{id:"linter-formatter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linter-formatter"}},[t._v("#")]),t._v(" Linter/Formatter")]),t._v(" "),a("p",[t._v("会在编译器里做一些代码的检测，固定书写风格")]),t._v(" "),a("h5",{attrs:{id:"unit-testing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unit-testing"}},[t._v("#")]),t._v(" Unit Testing")]),t._v(" "),a("p",[t._v("单元测试")]),t._v(" "),a("h5",{attrs:{id:"e2e-testing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#e2e-testing"}},[t._v("#")]),t._v(" E2E Testing")]),t._v(" "),a("p",[t._v("端到端测试")]),t._v(" "),a("h5",{attrs:{id:"使用配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用配置文件"}},[t._v("#")]),t._v(" 使用配置文件")]),t._v(" "),a("p",[t._v("将插件的配置保存在各自的配置文件（如 '.babelrc'）中")]),t._v(" "),a("h4",{attrs:{id:"vue-ui-创建一个项目-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-ui-创建一个项目-配置"}},[t._v("#")]),t._v(" vue ui 创建一个项目，配置")]),t._v(" "),a("h5",{attrs:{id:"use-history-mode-for-router-requires-proper-server-setup-for-index-fallback-in-production"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-history-mode-for-router-requires-proper-server-setup-for-index-fallback-in-production"}},[t._v("#")]),t._v(" Use history mode for router？（Requires proper server setup for index fallback in production）")]),t._v(" "),a("h5",{attrs:{id:"pick-a-css-pre-processor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pick-a-css-pre-processor"}},[t._v("#")]),t._v(" Pick a CSS pre-processor")]),t._v(" "),a("p",[t._v("PostCSS，Autoprefixer and  CSS modules are supported by default。默认支持自动修复和css模块")]),t._v(" "),a("h5",{attrs:{id:"pick-a-linter-formatter-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pick-a-linter-formatter-config"}},[t._v("#")]),t._v(" Pick a linter/formatter config")]),t._v(" "),a("p",[t._v("选择一个ESlint风格")]),t._v(" "),a("h5",{attrs:{id:"pick-additional-lint-features"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pick-additional-lint-features"}},[t._v("#")]),t._v(" pick additional lint features：")]),t._v(" "),a("p",[t._v("Lint on save（在保存的时候，都检查代码）"),a("br"),t._v("\nLint and fix on commit (在提交代码的时候，检查代码)"),a("br"),t._v("\n如果两个都不选择，那么就是关掉ESLint")]),t._v(" "),a("h4",{attrs:{id:"vue-ui-创建一个项目-创建完成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-ui-创建一个项目-创建完成"}},[t._v("#")]),t._v(" vue ui 创建一个项目，创建完成")]),t._v(" "),a("p",[t._v("创建完成之后，会自定创建该项目，并且自动运行npm install 安装依赖")]),t._v(" "),a("h2",{attrs:{id:"项目结构目录整理-初始化文件添加"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目结构目录整理-初始化文件添加"}},[t._v("#")]),t._v(" 项目结构目录整理，初始化文件添加")]),t._v(" "),a("h3",{attrs:{id:"目录及源码分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录及源码分析"}},[t._v("#")]),t._v(" 目录及源码分析")]),t._v(" "),a("h4",{attrs:{id:"vue-config-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-config-js"}},[t._v("#")]),t._v(" vue.config.js:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("module.exports = {\n    lintOnSave: false  // 在每次保存的时候是否使用ESlint检查代码\n}\n")])])]),a("h4",{attrs:{id:"package-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#package-json"}},[t._v("#")]),t._v(" package.json")]),t._v(" "),a("p",[t._v("定义了一些项目的描述。比如说，项目的版本，项目的名称，项目运行的一些脚本和一些项目中的依赖；\n"),a("strong",[t._v("dependencies")]),t._v(": 项目在打包后要用到的一些依赖\n"),a("strong",[t._v("devDependencies")]),t._v("：项目在开发阶段用到的一些依赖")]),t._v(" "),a("h4",{attrs:{id:"babel-config-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel-config-js"}},[t._v("#")]),t._v(" babel.config.js")]),t._v(" "),a("p",[t._v("babel的配置文件")]),t._v(" "),a("h4",{attrs:{id:"postcss-config-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#postcss-config-js"}},[t._v("#")]),t._v(" postcss.config.js")]),t._v(" "),a("p",[t._v("这个是css自动补充一些兼容代码的配置")]),t._v(" "),a("h4",{attrs:{id:"gitignore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore"}},[t._v("#")]),t._v(" .gitignore")]),t._v(" "),a("p",[t._v("这个是Git提交的忽略文件")]),t._v(" "),a("h4",{attrs:{id:"eslintrc-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eslintrc-js"}},[t._v("#")]),t._v(" .eslintrc.js")]),t._v(" "),a("p",[t._v("这个是用来配置eslint规则的，如果想制定一些自己的规则可以在，rules 里面添加")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  rules: {\n    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off'\n  },\n")])])]),a("h4",{attrs:{id:"public文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public文件夹"}},[t._v("#")]),t._v(" public文件夹")]),t._v(" "),a("p",[t._v("public文件夹，里面放的是公共文件，")]),t._v(" "),a("h5",{attrs:{id:"public-index-html"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-index-html"}},[t._v("#")]),t._v(" public -> index.html")]),t._v(" "),a("p",[t._v("index.html 这个是个模板文件。那么webpack在运行和打包项目的时候，会使用这个html文件，生成最后的项目的index.html")]),t._v(" "),a("h5",{attrs:{id:"public-favicon-ico"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-favicon-ico"}},[t._v("#")]),t._v(" public -> favicon.ico")]),t._v(" "),a("p",[t._v("这个是在标签栏上显示的小图标")]),t._v(" "),a("h4",{attrs:{id:"src文件-项目的主文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#src文件-项目的主文件"}},[t._v("#")]),t._v(" src文件，项目的主文件")]),t._v(" "),a("h5",{attrs:{id:"src-assets文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#src-assets文件夹"}},[t._v("#")]),t._v(" src -> assets文件夹")]),t._v(" "),a("p",[t._v("这个用来放置一些静态资源的，比如图片，图标字体文件，都可以放在这个里面")]),t._v(" "),a("h5",{attrs:{id:"src-components文件夹-components-组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#src-components文件夹-components-组件"}},[t._v("#")]),t._v(" src -> components文件夹 components（组件）")]),t._v(" "),a("p",[t._v("我们从代码中抽离出一些可以复用的逻辑，抽里成一个组件，以便我们复用。")]),t._v(" "),a("h5",{attrs:{id:"src-views文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#src-views文件夹"}},[t._v("#")]),t._v(" src -> views文件夹")]),t._v(" "),a("p",[t._v("将写的页面全都放在这个里面")]),t._v(" "),a("h5",{attrs:{id:"src-app-vue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#src-app-vue"}},[t._v("#")]),t._v(" src -> App.vue")]),t._v(" "),a("p",[t._v("这个是基础组件")]),t._v(" "),a("h5",{attrs:{id:"src-main-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#src-main-js"}},[t._v("#")]),t._v(" src -> main.js")]),t._v(" "),a("p",[t._v("项目入口文件")]),t._v(" "),a("h5",{attrs:{id:"src-router-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#src-router-js"}},[t._v("#")]),t._v(" src -> router.js")]),t._v(" "),a("p",[t._v("路由文件")]),t._v(" "),a("h5",{attrs:{id:"src-store-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#src-store-js"}},[t._v("#")]),t._v(" src -> store.js")]),t._v(" "),a("p",[t._v("vuex，项目状态管理文件")]),t._v(" "),a("h3",{attrs:{id:"添加的配置或文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加的配置或文件"}},[t._v("#")]),t._v(" 添加的配置或文件")]),t._v(" "),a("h4",{attrs:{id:"添加-editorconfig"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加-editorconfig"}},[t._v("#")]),t._v(" 添加 .editorconfig")]),t._v(" "),a("p",[t._v("使用vscode 的，可以添加一个编译器的文件，这个文件可以配置一些编译器的使用习惯")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("root = true         // 让我们配置文件生效\n[*]                 // 应用于全部文件\ncharset = utf-8     // 编码设置成utf-8\nindent_style = tab  // 缩进使用tab\nindent_size = 2     // 缩进的尺寸\n")])])]),a("p",[t._v("在vscode中，需要使用安装一个叫EditorConfig for VS Code")]),t._v(" "),a("h4",{attrs:{id:"添加-src-api文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加-src-api文件夹"}},[t._v("#")]),t._v(" 添加 src -> api文件夹")]),t._v(" "),a("p",[t._v("api就是接口，你的一些项目的ajax请求可以写在这个里面，作为一个统一的管理")]),t._v(" "),a("h4",{attrs:{id:"添加-src-assets文件夹-img文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加-src-assets文件夹-img文件夹"}},[t._v("#")]),t._v(" 添加 src -> assets文件夹 -> img文件夹")]),t._v(" "),a("p",[t._v("这是对 assets文件夹进行整理，img文件里面放置图片")]),t._v(" "),a("h4",{attrs:{id:"添加-src-assets文件夹-font文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加-src-assets文件夹-font文件夹"}},[t._v("#")]),t._v(" 添加 src -> assets文件夹 -> font文件夹")]),t._v(" "),a("p",[t._v("这是对 assets文件夹进行整理，font文件里面放置图标字体，字体文件")]),t._v(" "),a("h4",{attrs:{id:"添加-src-config文件夹-index-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加-src-config文件夹-index-js"}},[t._v("#")]),t._v(" 添加 src -> config文件夹 -> index.js")]),t._v(" "),a("p",[t._v("项目中的一些配置放在config文件夹里面的index.js中。使用es6的模块系统，导出一个配置对象。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("export default {\n\t//\n}\n")])])]),a("p",[t._v("设置好之后想在其他地方用到这个的时候，想要引入的话，需要在 "),a("strong",[t._v("store.js")]),t._v(" 中这样引入")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import config form './config'   // 路径只写到config，他会自动在config文件夹中找，index.js文件，引入配置对象。\n\nimport config form './config/index'  // 如果这样写的话，会直接找到index.js文件，引入配置对象。\n")])])]),a("h4",{attrs:{id:"添加-src-directive文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加-src-directive文件夹"}},[t._v("#")]),t._v(" 添加 src -> directive文件夹")]),t._v(" "),a("p",[t._v("用来放置vue的自定义指令")]),t._v(" "),a("h4",{attrs:{id:"添加-src-lib文件夹-util-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加-src-lib文件夹-util-js"}},[t._v("#")]),t._v(" 添加 src -> lib文件夹 -> util.js")]),t._v(" "),a("p",[t._v("里面首先一个加util.js。可以将于业务结合的工具和方法")]),t._v(" "),a("h4",{attrs:{id:"添加-src-lib文件夹-tools-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加-src-lib文件夹-tools-js"}},[t._v("#")]),t._v(" 添加 src -> lib文件夹 -> tools.js")]),t._v(" "),a("p",[t._v("放一些与业务没有耦合，纯粹的是一种工具函数")]),t._v(" "),a("h4",{attrs:{id:"添加-src-router文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加-src-router文件夹"}},[t._v("#")]),t._v(" 添加 src -> router文件夹")]),t._v(" "),a("p",[t._v("有一些复杂路由拦截的，要是全部放在 src文件夹下的 "),a("strong",[t._v("router.js")]),t._v(" 中会显得更加复杂。所以创建 "),a("strong",[t._v("router文件夹")]),t._v(" 对router进行统一管理。")]),t._v(" "),a("p",[t._v("首先我们要将 "),a("strong",[t._v("router.js")]),t._v(" 放置到 "),a("strong",[t._v("router文件夹")]),t._v(" 中")]),t._v(" "),a("h4",{attrs:{id:"添加-src-router文件夹-index-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加-src-router文件夹-index-js"}},[t._v("#")]),t._v(" 添加 src -> router文件夹 -> index.js")]),t._v(" "),a("p",[t._v("首先，将 "),a("strong",[t._v("router.js")]),t._v(" 中的内容，全部复制，粘贴到 "),a("strong",[t._v("index.js")]),t._v(" 中，将 "),a("strong",[t._v("index.js")]),t._v(" 中的路由列表抽取取来，将 **router.js ** 中的全部内容删除，添加用es6的模块系统默认将他导出，我们在 "),a("strong",[t._v("router.js")]),t._v(" 中做路由的列表的配置， 需要的一些模块需要引入进来")]),t._v(" "),a("p",[t._v("配置完成后 index.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import Vue from 'vue'\nimport Router from 'vue-router'\nimport routes from './router'\n\nVue.use(Router)\n\nexport default new Router({\n  routes: routes\n})\n\n")])])]),a("p",[t._v("配置完成后 router.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import Home from './views/Home.vue'\nexport default [\n\t{\n\t\tpath: '/',\n\t\tname: 'home',\n\t\tcomponent: Home\n\t},\n\t{\n\t\tpath: '/about',\n\t\tname: 'about',\n\t\t// route level code-splitting\n\t\t// this generates a separate chunk (about.[hash].js) for this route\n\t\t// which is lazy-loaded when the route is visited.\n\t\tcomponent: () => import(/* webpackChunkName: \"about\" */ './views/About.vue')\n\t}\n]\n")])])]),a("h4",{attrs:{id:"添加-src-store文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加-src-store文件夹"}},[t._v("#")]),t._v(" 添加 src -> store文件夹")]),t._v(" "),a("p",[t._v("stroe文件夹主要用来处理vuex")]),t._v(" "),a("p",[t._v("首先我们将 "),a("strong",[t._v("store.js")]),t._v(" 放置到 "),a("strong",[t._v("store")]),t._v(" 文件夹中，并改名为  "),a("strong",[t._v("index.js")])]),t._v(" "),a("p",[t._v("项目最根本的一些仓库状态，我们要每一个都给他们生成一个文件 比如 "),a("strong",[t._v("state")]),t._v(" 就要给他生成一个 "),a("strong",[t._v("state.js")]),t._v(" 文件； "),a("strong",[t._v("mutations")]),t._v(" 就要给他生成一个 "),a("strong",[t._v("mutations.js")]),t._v(" 文件；  "),a("strong",[t._v("actions")]),t._v(" 就要给他生成一个 "),a("strong",[t._v("actions.js")]),t._v(" 文件，这些都是项目中最基础的一些状态。")]),t._v(" "),a("h4",{attrs:{id:"操作-src-store文件夹-index-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作-src-store文件夹-index-js"}},[t._v("#")]),t._v(" 操作 src -> store文件夹 -> index.js")]),t._v(" "),a("p",[t._v("将生成的3个文件， "),a("strong",[t._v("state.js")]),t._v("， "),a("strong",[t._v("mutations.js")]),t._v("， "),a("strong",[t._v("actions.js")]),t._v("三个文件引入 "),a("strong",[t._v("index.js")]),t._v(" 中")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import Vue from 'vue'\nimport Vuex from 'vuex'\n\nimport state from './state'\nimport mutations from './mutations'\nimport actions from './actions'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: state,\n  mutations: mutations,\n  actions: actions\n})\n")])])]),a("p",[t._v("使用es6模块，默认引用的时候，可以使用简写方式，对上面代码修改为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("export default new Vuex.Store({\n  state\n  mutations\n  actions\n})\n")])])]),a("p",[t._v("随着我们的项目越加复杂，有一些板块，我们可以创建一些板块，模块，将他们加载进来，例如：首先我们要先创建一个 "),a("strong",[t._v("module文件夹")]),t._v(" 里面放着我们的板块，比如与用户相关的，比如用户的用户名，用户信息，都放在 "),a("strong",[t._v("user.js")]),t._v(" 中。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const state = {\n  //\n}\nconst mutations = {\n  //\n}\nconst actions = {\n  //\n}\n\n// 使用es6模块将导出去\nexport default {\n  state,\n  mutations,\n  actions\n}\n\n")])])]),a("p",[t._v("创建完成之后，如何引进来呢？ 在index.js中,首先import进来，然后再export default 的 modules中引入就行。示例代码如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import Vue from 'vue'\nimport Vuex from 'vuex'\n// import config form './config/index'\n\nimport state from './state'\nimport mutations from './mutations'\nimport actions from './actions'\nimport user from './module/user'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state,\n  mutations,\n  actions,\n  modules: {\n    user\n  }\n})\n\n")])])]),a("h4",{attrs:{id:"修改-main-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改-main-js"}},[t._v("#")]),t._v(" 修改 main.js")]),t._v(" "),a("p",[t._v("我们进行了很多操作，对router，store都发生了改变，所以我们要对 main.js 进行修改")]),t._v(" "),a("h4",{attrs:{id:"添加-mock文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加-mock文件夹"}},[t._v("#")]),t._v(" 添加 mock文件夹")]),t._v(" "),a("p",[t._v("如果有需要的话，我们需要添加一个mockjs，主要用来，在后台服务器还没有搭建完成，实现请求的模拟，返回一些模拟的数据。")]),t._v(" "),a("h5",{attrs:{id:"首先安装mockjs-作为开发依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首先安装mockjs-作为开发依赖"}},[t._v("#")]),t._v(" 首先安装mockjs,作为开发依赖")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm install mockjs -D\n")])])]),a("h5",{attrs:{id:"src-mock文件夹-index-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#src-mock文件夹-index-js"}},[t._v("#")]),t._v(" src -> mock文件夹 -> index.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 引入Mock\nimport Mock from 'mockjs'\n\n// 后面定义的接口模拟器都定义在中间位置\n\n// 最后要导出Mock\nexport default Mock\n\n")])])]),a("h2",{attrs:{id:"基本配置讲-跨域配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本配置讲-跨域配置"}},[t._v("#")]),t._v(" 基本配置讲，跨域配置")]),t._v(" "),a("h4",{attrs:{id:"vue-config-js配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-config-js配置"}},[t._v("#")]),t._v(" vue.config.js配置")]),t._v(" "),a("h5",{attrs:{id:"定义项目的基本路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义项目的基本路径"}},[t._v("#")]),t._v(" 定义项目的基本路径")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 定义BASE_URL常量，我们分两种情况，当前是在开发环境还是要打包编译\n// 如果当前是开发环境（procution），那这种情况下我们的路径设置为了 /iview-admin/ 如果不是，路径为 /\nconst BASE_URL = process.env.NODE_ENV === 'procution' ? '/iview-admin/' : '/'\n// 在上面一个 / (斜线) 代表你的项目是要指定在域名的根目录下，如果你的项目要指定在 iview-admin 下，那么你就需要这样写（'/iview-admin/'）\n\nbaseUrl: BASE_URL,\n")])])]),a("h5",{attrs:{id:"颗粒化配置webpack-方便开发的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#颗粒化配置webpack-方便开发的配置"}},[t._v("#")]),t._v(" 颗粒化配置webpack（方便开发的配置）")]),t._v(" "),a("p",[t._v("它里面是一个方法，它里面是一个链式调用，首先我们需要在之前先定义一个方法，先引入node的path模块，接下来，定义一个resolve方法，后来加载路径。那么这种也可以进行简写,这个使用的是ES6的简短函数。然后引入src。 那么这个路径就代表你的当前路径拼接上你的src。")]),t._v(" "),a("p",[t._v(".set('@', resolve('src')) 这样设置，@符号就代表src这个路径，以后再项目中引用到东西的地方，都可以使用@符号代替前面的src到这一级的目录。比如要引入api的话，就是 @/api 就可以了。为了方便，还会用 _C 来代替 src/components")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const path = require('path')\n// 首先我们需要先定义一个方法\nconst resolve = dir => {\n  return path.join(__dirname, dir)\n}\n\nchainWebpack: config => {\n  config.resolve.alias\n    .set('@', resolve('src'))\n    .set('_c', resolve('src/components'))\n}\n")])])]),a("p",[t._v("resolve方法的简写")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const resolve = (dir) => path.join(__dirname, dir)\n\n")])])]),a("h5",{attrs:{id:"跨域配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域配置"}},[t._v("#")]),t._v(" 跨域配置")]),t._v(" "),a("p",[t._v("使用devServer配置，devServer来配置proxy， proxy的值是我们需要代理的url，如果我的代理url为：http://localhost:4000 那么他会告诉开发服务器，将任何未知请求，也就是没有匹配到静态文件的请求都代理到 这个url，来满足跨域的需求")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("devServer: {\n    proxy: 'http://localhost:4000'\n  }\n")])])]),a("h5",{attrs:{id:"vue-config-js全部源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-config-js全部源码"}},[t._v("#")]),t._v(" vue.config.js全部源码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const path = require('path')\n// 首先我们需要先定义一个方法\nconst resolve = dir => {\n  return path.join(__dirname, dir)\n}\n\n// 定义BASE_URL常量，我们分两种情况，当前是在开发环境还是要打包编译\n// 如果当前是开发环境（procution），那这种情况下我们的路径设置为了 /iview-admin/ 如果不是，路径为 /\nconst BASE_URL = process.env.NODE_ENV === 'procution' ? '/iview-admin/' : '/'\n// 在上面一个 / (斜线) 代表你的项目是要指定在域名的根目录下，如果你的项目要指定在 iview-admin 下，那么你就需要这样写（'/iview-admin/'）\n\nmodule.exports = {\n  // 在每次保存的时候是否使用ESlint检查代码\n  lintOnSave: false,\n  // 定义项目的基本路径\n  baseUrl: BASE_URL,\n  // 颗粒化的配置一下webpack,它是一个方法，\n  chainWebpack: config => {\n    config.resolve.alias\n      .set('@', resolve('src'))\n      .set('_c', resolve('src/components'))\n  },\n  // 打包时不生成.map文件，会减少我们打包的体积，加快打包速度\n  productionSourceMap: false,\n  // 跨域配置\n  devServer: {\n    proxy: 'http://localhost:4000'\n  }\n}\n\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);