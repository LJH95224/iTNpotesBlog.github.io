(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{502:function(t,e,a){"use strict";a.r(e);var n=a(42),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"路由详解-一-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由详解-一-基础"}},[t._v("#")]),t._v(" 路由详解（一）——基础")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("课程主要内容")]),a("br"),t._v("\n1、 router-link 和 router-view组件 "),a("br"),t._v("\n2、 路由配置 "),a("br"),t._v("   a. 动态路由"),a("br"),t._v("   b. 嵌套路由"),a("br"),t._v("    c. 命名路由 "),a("br"),t._v("   d. 命名视图 "),a("br"),t._v("\n3、 JS操作路由 "),a("br"),t._v("\n4、 重定向和别名 "),a("br")])]),t._v(" "),a("h2",{attrs:{id:"router-link和router-view组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#router-link和router-view组件"}},[t._v("#")]),t._v(" router-link和router-view组件")]),t._v(" "),a("h3",{attrs:{id:"router文件夹-index-js解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#router文件夹-index-js解析"}},[t._v("#")]),t._v(" router文件夹 -> index.js解析")]),t._v(" "),a("p",[t._v("index.js里面创建的是路由实例，在router.js里面，放置的是路由列表")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import Vue from 'vue'\nimport Router from 'vue-router'\n\x3c!--引进路由列表--\x3e\nimport routes from './router'\n\x3c!--Router插件要想引进来的话需要用Vue.use方法加载进来--\x3e\nVue.use(Router)\n\nexport default new Router({\n  routes: routes\n})\n\n")])])]),a("h3",{attrs:{id:"app-vue里面示例分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#app-vue里面示例分析"}},[t._v("#")]),t._v(" App.vue里面示例分析")]),t._v(" "),a("p",[t._v("在App.vue示例里面，有两个router-link组件，一个router-view组件。\nrouter-link这个组件，它其实是封装了一个 "),a("strong",[t._v("a")]),t._v(" 标签，也就是链接标签，里面有一个重要属性 "),a("strong",[t._v("to")]),t._v(" 它指定的值是一个路径，在 router-link 中间你可以包含一些内容。")]),t._v(" "),a("p",[t._v("router-view组件是一个视图渲染组件，通过 router-link 跳转到的页面加载的组件都会在 router-view 这个地方渲染")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n  <div id="app">\n    <div id="nav">\n      <router-link to="/">Home</router-link> |\n      <router-link to="/about">About</router-link>\n    </div>\n    <router-view/>\n  </div>\n</template>\n\n')])])]),a("p",[t._v("对于router-link 定义的路径，对应的要渲染的组件在 "),a("strong",[t._v("router文件夹")]),t._v(" 的 "),a("strong",[t._v("router.js")]),t._v(" 路由列表里面定义")]),t._v(" "),a("h3",{attrs:{id:"router文件夹-router-js解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#router文件夹-router-js解析"}},[t._v("#")]),t._v(" router文件夹 -> router.js解析")]),t._v(" "),a("p",[t._v("首先，路由列表是一个数组，里面包含着路由对象，一个基本的路由对象必须包含两个属性，一个是 "),a("strong",[t._v("path")]),t._v(" 一个是 "),a("strong",[t._v("component")]),t._v("。 "),a("br"),t._v(" "),a("strong",[t._v("path")]),t._v(" 指代的是路径，也就是你在url里面输入的路径。"),a("br"),t._v(" "),a("strong",[t._v("component")]),t._v(" 指代的是组件，也就是你 path 里面的路径要对应的那个组件。")]),t._v(" "),a("p",[t._v("第一个路由对象：我们引入了一个 "),a("strong",[t._v("Home")]),t._v(" 组件 @ 符号指代的是 src 路径。在vue.config.js里面配置的。\n第二个路由对象：path路径是 '/about' 。component 里面跟第一个路由对象写法不一样，我们看注释可以看出，这样写法可以起到一个懒加载（lazy-loaded）的作用，就是说当我们访问到这个页面的时候，他才会加载这个页面组件，这样起到一个优化的作用。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import Home from '@/views/Home.vue'\nexport default [\n  {\n    path: '/',\n    name: 'home',\n    component: Home\n  },\n  {\n    path: '/about',\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () => import(/* webpackChunkName: \"about\" */ '@/views/About.vue')\n  }\n]\n")])])]),a("h2",{attrs:{id:"路由配置-动态路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由配置-动态路由"}},[t._v("#")]),t._v(" 路由配置-动态路由")]),t._v(" "),a("p",[t._v("首先我们来创建一个路由对象， (:name) 这是一个动态路由参数,然后创建一个argu.vue页面组件，在argu.vue页面显示一下 "),a("strong",[t._v("$route.params.name")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("router.js:\n{\n    path: '/argu/:name',\n    component: () => import('@/views/argu.vue')\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("argu.vue:\n<template>\n  <div>{{ $route.params.name }}</div>\n</template>\n<script>\nexport default {\n  //\n}\n<\/script>\n")])])]),a("p",[t._v("当你在浏览器中输入 http://localhost:8080/#/argu/lision 时，页面会显示 argu 后面的值，当改变 lision 的时候，页面上也会随之改变。")]),t._v(" "),a("p",[a("img",{attrs:{src:"195BBB0659264445AAEB74349A8CD59E",alt:"image"}})]),t._v(" "),a("p",[a("strong",[t._v("$route")]),t._v("：代表的是当前加载页面的路由对象，它里面包含一个 "),a("strong",[t._v("params")]),t._v(" 参数，"),a("strong",[t._v("params")]),t._v(" 也是一个对象，里面包含一个叫 "),a("strong",[t._v("name")]),t._v(" 的值，name的值就是动态路由上 “:name”, 无论name是什么，匹配到的都是 ** path: '/argu/:name'这个对应的路由对象** 加载的都是 "),a("strong",[t._v("argu.vue")]),t._v(" 文件。这样就能起到一个组件的复用，只需要传不同的参数，呈现同一个页面可以处理不同的逻辑。")]),t._v(" "),a("h2",{attrs:{id:"路由配置-嵌套路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由配置-嵌套路由"}},[t._v("#")]),t._v(" 路由配置-嵌套路由")]),t._v(" "),a("p",[t._v("在实际开发过程中我们经常用到多层嵌套的组件，那么这些嵌套的组件可以通过嵌套路由进行渲染。")]),t._v(" "),a("p",[t._v("router.js:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 嵌套路由\n  {\n    path: '/parent',\n    component: () => import('@/views/parent.vue'),\n    // children属性是一个数组，里面包含嵌套在parent组件里面的子集页面\n    children: [\n      {\n        // 子集的path里面是不需要斜线的,只有父级的path才需要写 加 \"/\"。作为嵌套路由，他会自动补全子集里面的 \"/\" 所以path的值直接就是 'child'\n        path: 'child',\n        component: () => import('@/views/child.vue')\n      }\n    ]\n  }\n")])])]),a("p",[t._v("parent.vue")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<template>\n  <div>\n    I am parent\n    \x3c!-- 用来渲染路由视图 --\x3e\n    <router-view></router-view>\n  </div>\n</template>\n<script>\nexport default {\n  //\n}\n<\/script>\n")])])]),a("p",[t._v("child.vue")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<template>\n  <div>\n    I am child\n  </div>\n</template>\n<script>\nexport default {\n  //\n}\n<\/script>\n\n")])])]),a("p",[t._v("代码运行显示效果图：当路径为 http://localhost:8080/#/parent/child\n"),a("img",{attrs:{src:"A31545F6B3F64310B9C1C3D3D8B554D7",alt:"image"}})]),t._v(" "),a("h2",{attrs:{id:"路由配置-命名路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由配置-命名路由"}},[t._v("#")]),t._v(" 路由配置-命名路由")]),t._v(" "),a("p",[t._v("在路由对象中，还有一个属性，那就是 name 属性。当你给路由对象设置一个name属性，也就是给这个路由对象命名。在 "),a("strong",[t._v("App.vue")]),t._v(" 中，有两个 "),a("strong",[t._v("router-link")]),t._v("， 通过 "),a("strong",[t._v("to")]),t._v(" 这个属性，给他设置一个路径，点击这个地方，就会跳转到对应的路径，我们使用命名路由的时候，将路由对象的 "),a("strong",[t._v("name")]),t._v(" 值给 "),a("strong",[t._v("router-link")]),t._v(" 里面的 "),a("strong",[t._v("to")]),t._v(" 属性的时候。我们就可以通过 "),a("strong",[t._v("name")]),t._v(" 值来进行跳转。")]),t._v(" "),a("p",[t._v("router.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  {\n    path: '/',\n    name: 'home',\n    component: Home\n  },\n  {\n    path: '/about',\n    name: 'about',\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () => import(/* webpackChunkName: \"about\" */ '@/views/About.vue')\n  },\n")])])]),a("p",[t._v("App.vue")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n  <div id="app">\n    <div id="nav">\n      <router-link to="/">Home</router-link> |\n      <router-link to="/about">About</router-link>\n    </div>\n    <router-view/>\n  </div>\n</template>\n')])])]),a("p",[t._v("首先要给 "),a("strong",[t._v("to")]),t._v(" 传入一个对象，如果要是对象的话，那么 router-link 里面的 to 属性就不能像以前那样写了,修改如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<router-link v-bind:to=\"{name: 'about'}\">About</router-link>\n或\n<router-link :to=\"{name: 'about'}\">About</router-link>\n")])])]),a("p",[t._v("运行效果入下：")]),t._v(" "),a("p",[t._v("http://localhost:8080/#/")]),t._v(" "),a("p",[a("img",{attrs:{src:"29BE7C5BB2744CF8B2F4CDF0A59FFC2B",alt:"image"}})]),t._v(" "),a("p",[t._v("点击 about 按钮之后")]),t._v(" "),a("p",[t._v("http://localhost:8080/#/about\n"),a("img",{attrs:{src:"0CF23429107E4559AF90F2A60983F168",alt:"image"}})]),t._v(" "),a("p",[t._v("在上文App.vue中，router-link 是双标签， router-view 是单标签。那是因为 router-link 里面有东西，我们需要在它中间放一些东西。如果组件中间不需要放东西的时候，我们也可以将 router-link 写成单标签。")]),t._v(" "),a("h2",{attrs:{id:"路由配置-命名视图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由配置-命名视图"}},[t._v("#")]),t._v(" 路由配置-命名视图")]),t._v(" "),a("p",[t._v("在 App.vue 中只有一个 router-view 这么一个标签，那么如果我们想在同一个页面上显示多个视图，而且让每个视图显示在指定的位置。")]),t._v(" "),a("p",[t._v("在App.vue中加入两个 router-view")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<template>\n  <div id="app">\n    <div id="nav">\n      <router-link :to="{name: \'home\'}">Home</router-link> |\n      <router-link v-bind:to="{name: \'about\'}">About</router-link>\n    </div>\n    <router-view/>\n    <router-view name="email" />\n    <router-view name="tel" />\n  </div>\n</template>\n')])])]),a("p",[t._v("==使用的是特别要注意的是，name为router列表里面的name的值，name如果使用path的话，就会出错==")]),t._v(" "),a("p",[t._v("router.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" // 命名视图\n  {\n    path: '/named_view',\n    // 这个是 components 之前的都是 component 没有 s。 加上 s 之后说明我们要加载多个组件\n    components: {\n      // 如果在之前的 app.vue 中的 router-view 没有命名的话，那么就加载 default 对应的组件的\n      default: () => import('@/views/child.vue'),\n      email: () => import('@/views/email.vue'),\n      tel: () => import('@/views/tel.vue')\n    }\n  }\n")])])]),a("p",[t._v("email.vue")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<template>\n  <div>\n    email: 991538766@qq.com\n  </div>\n</template>\n<script>\nexport default {\n  //\n}\n<\/script>\n")])])]),a("p",[t._v("tel.vue")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<template>\n  <div>\n    tel: 16855555555\n  </div>\n</template>\n<script>\nexport default {\n  //\n}\n<\/script>\n")])])]),a("p",[t._v("运行效果图如下：\n"),a("img",{attrs:{src:"44ECE0E999B64BC2AB0A043BC0CF8848",alt:"image"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"936CC00B608F499091283B501DB1BE3A",alt:"image"}})]),t._v(" "),a("h2",{attrs:{id:"重定向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重定向"}},[t._v("#")]),t._v(" 重定向")]),t._v(" "),a("p",[t._v("重定向能够帮我们把当前要访问的 url 定向到 另一个 url。比如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 重定向\n  {\n    // 当我们要访问 main 这个路径的时候，他会重定向到 \"/\" 也就是 home 页\n    path: '/main1',\n    redirect: '/'\n  },\n  {\n    // 当我们要访问 main 这个路径的时候，他会重定向到 name 为 home 的页面\n    path: '/main2',\n    redirect: {\n      name: 'home'\n    }\n  },\n  // 还可以向其中插入一个方法函数\n  {\n    // 当我们要访问 main 这个路径的时候，他会重定向到 name 为 home 的页面\n    path: '/main3',\n    redirect: to => {\n      console.log(to)\n      return {\n        name: 'home'\n      }\n      // 或者我们还可以返回一个路径 \"/\" 最后的显示效果都是一样的\n      return '/'\n    }\n  }\n  // 如果使用 ES6 里面的简写，那么也是可以的\n  {\n    // 当我们要访问 main 这个路径的时候，他会重定向到 name 为 home 的页面\n    path: '/main3',\n    redirect: to => \"/\"\n")])])]),a("p",[t._v("http://localhost:8080/#/main3")]),t._v(" "),a("p",[a("img",{attrs:{src:"BD10F60DF88B4275A83CD213D972C15B",alt:"image"}})]),t._v(" "),a("h2",{attrs:{id:"别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#别名"}},[t._v("#")]),t._v(" 别名")]),t._v(" "),a("p",[t._v("当我们访问一个路径的时候，可以给他定义一个别名，生成另外一个路径，访问路径的时候与访问别名的时候效果相同。\nrouter.js 我们给 home路由对象定义一个别名")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  {\n    path: '/',\n    alias: '/home_page',\n    name: 'home',\n    component: Home\n  },\n")])])]),a("p",[t._v("当我们访问首页的时候")]),t._v(" "),a("p",[t._v("http://localhost:8080/#/ 与 http://localhost:8080/#/home_page 显示相同。")]),t._v(" "),a("h2",{attrs:{id:"js操作路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js操作路由"}},[t._v("#")]),t._v(" JS操作路由")]),t._v(" "),a("p",[t._v("编程式的导航，通过js控制页面的跳转，返回")]),t._v(" "),a("h3",{attrs:{id:"返回上一页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回上一页"}},[t._v("#")]),t._v(" 返回上一页")]),t._v(" "),a("p",[t._v("我们使用编程时导航的时候，需要用到一个路由实例。 路由实例就是 this.$router"),a("br"),t._v("\n路由实例有很多的方法，我们现在要返回上一页。我们可以用 this.$router.go(-1)。 返回后面的一页"),a("br"),t._v("\n如果 this.$router.go(1) 那么就是前进到下一页。"),a("br"),t._v("\n除了可以用这种方式可以后退的，我们还可以用 this.$router.back()")]),t._v(" "),a("h3",{attrs:{id:"跳转到指定页面-push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跳转到指定页面-push"}},[t._v("#")]),t._v(" 跳转到指定页面 push")]),t._v(" "),a("p",[t._v("跳转到指定页面，要使用路由实例中的 "),a("strong",[t._v("push")]),t._v(" 方法")]),t._v(" "),a("h3",{attrs:{id:"替换到指定页面-replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#替换到指定页面-replace"}},[t._v("#")]),t._v(" 替换到指定页面 replace")]),t._v(" "),a("p",[t._v("push和replace有什么区别呢？当我们使用push的时候，会在我们的浏览历史里加入一个浏览记录，当我们回退的时候就能回退到之前的页面；如果用replace呢？他就会把当前的浏览历史，替换成parent这个页面，如果这时候点击回退的时候，会回退到 parent 页面，不会回退到之前的页面。")]),t._v(" "),a("p",[t._v("当我在push的时候添加了一些其他的信息，当我们点击跳转的时候，顶部url变成了 http://localhost:8080/#/parent?name=Alfred 多了一个参数")]),t._v(" "),a("p",[a("img",{attrs:{src:"C72D3B2BA8EF471ABCEDE92C27C24DAA",alt:"image"}})]),t._v(" "),a("p",[t._v("我们的argu.vue中有  "+t._s(t.$route.params.name)+"  当我们将跳转到parent页面转变成跳转到 argu页面之后")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<template>\n  <div>{{ $route.params.name }}</div>\n</template>\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("this.$router.push({\n  name: 'argu',\n  // 同时我们也可以在对象里面添加一些信息，比如：\n  params: {\n    name: \"Alfred\"\n  }\n})\n")])])]),a("p",[t._v("顶部的地址栏变成了 http://localhost:8080/#/argu/Alfred 我们可以看到，匹配到了该页面，而且还带了一个参数。")]),t._v(" "),a("p",[a("img",{attrs:{src:"2FEC0684AC77495F9F2B660794DE6F9B",alt:"image"}})]),t._v(" "),a("p",[t._v("如果我们使用 ES6 的模板语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const name = 'Alfred'\nthis.$router.push({\n  path: `/argu/${name}`\n})\n")])])]),a("p",[t._v("这样效果也是可以的，我们需要注意一下 path 的写法。path后面定义的params是无效的。")]),t._v(" "),a("p",[t._v("Home.vue全部源码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<template>\n  <div class=\"home\">\n    <img alt=\"Vue logo\" src=\"../assets/img/logo.png\">\n    <HelloWorld msg=\"Welcome to Your Vue.js App\"/>\n    <button @click=\"handleClick('back')\">返回上一页</button>\n    <button @click=\"handleClick('push')\">跳转到parent</button>\n    <button @click=\"handleClick('replace')\">替换到parent</button>\n  </div>\n</template>\n\n<script>\n// @ is an alias to /src\nimport HelloWorld from '@/components/HelloWorld.vue'\n\nexport default {\n  name: 'home',\n  components: {\n    HelloWorld\n  },\n  methods: {\n    handleClick (type) {\n      // 我们使用编程时导航的时候，需要用到一个路由实例。 路由实例就是 this.$router\n      if (type === 'back') {\n        // 路由实例有很多的方法，我们现在要返回上一页。我们可以用 this.$router.go(-1)。 返回后面的一页\n        // 如果 this.$router.go(1) 那么就是前进到下一页。\n        // this.$router.go(-1)\n        // 除了可以用这种方式可以后退的，我们还可以用 this.$router.back()\n        this.$router.back()\n      } else if (type === 'push') {\n        // 通过路径的方式\n        // this.$router.push('/parent')\n        // 命名路由的方式\n        /*\n        this.$router.push({\n          name: 'parent',\n          // 同时我们也可以在对象里面添加一些信息，比如：\n          query: {\n            name: \"Alfred\"\n          }\n        })*/\n        /*\n        // 跳转到 argu 页面\n        this.$router.push({\n          name: 'argu',\n          // 同时我们也可以在对象里面添加一些信息，比如：\n          params: {\n            name: \"Alfred\"\n          }\n        })*/\n        // 使用 ES6 的模板语法\n        const name = 'Alfred'\n        this.$router.push({\n          path: `/argu/${name}`\n        })\n      } else if (type === 'replace') {\n        this.$router.replace({\n          name: 'parent'\n        })\n      }\n    }\n  }\n}\n<\/script>\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);