(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{519:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-数据类型"}},[t._v("#")]),t._v(" JavaScript 数据类型")]),t._v(" "),a("h2",{attrs:{id:"javascript-中数据类型那些可能会中招的细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-中数据类型那些可能会中招的细节"}},[t._v("#")]),t._v(" JavaScript 中数据类型那些可能会中招的细节")]),t._v(" "),a("h3",{attrs:{id:"_1、number-类型注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、number-类型注意事项"}},[t._v("#")]),t._v(" 1、number 类型注意事项")]),t._v(" "),a("p",[t._v("number 类型包括：正数，负数，0，小数，NaN")]),t._v(" "),a("blockquote",[a("p",[t._v("NaN： 意思是 not a number 不是一个有效数字，但是它是属于 number 类型的")])]),t._v(" "),a("h4",{attrs:{id:"_1-和-和-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-和-和-的区别"}},[t._v("#")]),t._v(" （1） = 和 == 和 === 的区别")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("=")]),t._v(" 是赋值")]),t._v(" "),a("li",[a("code",[t._v("==")]),t._v(" 是判断左右两边的值是否相等（非严格相等，只要字面相等则相等）")]),t._v(" "),a("li",[a("code",[t._v("===")]),t._v(" 是判断左右两边是否相等，严格判断（包括数据类型。类型和字面量相等才相等）")])]),t._v(" "),a("h4",{attrs:{id:"_2-nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-nan"}},[t._v("#")]),t._v(" （2） NaN")]),t._v(" "),a("ul",[a("li",[t._v("NaN 和 NaN 是不相等的， NaN === NaN 返回的是 false")]),t._v(" "),a("li",[t._v("isNaN(); 检测一个值不是有效数字的命题是否成立，是有效数字则返回 false，不是有效数字返回的才是 true")])]),t._v(" "),a("blockquote",[a("p",[t._v("isNaN() 如果检测的值不是 number 类型，浏览器会默认把值转化为 number 类型，然后再判断是否为有效数字")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 例如：")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印结果是 true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、首先把 ‘123’ 转化为 number 类型的，使用 Number() 转换方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、然后判断 number 类型的值是否满足 isNaN() 的条件")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("Number() 方法强制将其他数据类型转为 number 类型（强制数据类型转换）")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(' Number()方法 强制将其他数据类型转为number类型，\n 要求：如果是字符串，字符串中一定都需要是数字才可以转换\n 例如：Number("12")返回的结果是12，Number("12px")返回的结果就是NaN \n')])])]),a("blockquote",[a("p",[t._v("非强制数据类型转换 parseInt() /parseFloat()")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("parseInt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 从左到右，一个个字符串查找，把是数字的转为有效数字，中途如果遇到了一个非有效数字，就不在继续查找了\nparseFloat： 和上面一样，但是可以多识别一个小数点\n例如： "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12px'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("的值为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12.5px'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("的值为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.5")]),t._v("\n")])])]),a("h3",{attrs:{id:"_2、-数据类型的转换规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、-数据类型的转换规则"}},[t._v("#")]),t._v(" 2、 数据类型的转换规则")]),t._v(" "),a("h4",{attrs:{id:"_1-常见的-boolean-转换符号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-常见的-boolean-转换符号"}},[t._v("#")]),t._v(" （1） 常见的 boolean 转换符号")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("!")]),t._v(" 一个感叹号是取反，首先将值转化为布尔类型的值，然后取反")]),t._v(" "),a("li",[a("code",[t._v("!!")]),t._v(" 两个感叹号是将其他的数据类型转换为 boolean 类型，相当于 "),a("strong",[t._v("Boolean()")])])]),t._v(" "),a("h5",{attrs:{id:"转换规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转换规则"}},[t._v("#")]),t._v(" 转换规则")]),t._v(" "),a("p",[a("strong",[t._v("1、如果只有一个值，判断这个值是真还是假，遵循： 只有 "),a("code",[t._v("0")]),t._v("， "),a("code",[t._v("NaN")]),t._v("， "),a("code",[t._v("''")]),t._v("， "),a("code",[t._v("null")]),t._v("， "),a("code",[t._v("undefined")]),t._v(" 这五个是假，其余的都是真")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("注意：此处数字 0 才为假，如果是字符串 ‘0’ 同样为真")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"为真"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"为假"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为假")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"为真"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"为假"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为真")]),t._v("\n")])])]),a("p",[a("strong",[t._v("2、如果是两个值比较相等，遵循这个规则")])]),t._v(" "),a("p",[t._v("val1 == val2 两个值可能不是同一数据类型的，如果是 == 比较的话，会进行默认的数据类型转换")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("对象 == 对象 永远不相等")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("对象 == 字符串 先将对象转化为字符串 （调用toString的方法），然后再进行比较")])])])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 转换为字符串 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" 转换为字符串 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[object Object]"')]),t._v(" \n  \n  所以"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" 为 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" 为 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),a("ul",[a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("对象 == 布尔类型 对象先转化为字符串（toString），然后把字符串转化为数字（ Number ） 布尔类型也转换为数字(true是1 false 是0)，最后让两个数字比较")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('例如：\n        console.log([] == false) // 为 true\n        解析：首先 []转为字符串"",然后字符串转为数字类型number，Number("")结果为0，false\n        转为数字类型，Number(false) 结果也为0，所以 [] == false, 就解析成了 0与0的比较，所以相等，\n        返回true\n')])])]),a("ul",[a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("对象 == 数字 对象先转为字符串(toString)，然后把字符串转换为数字(Number)")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[t._v("数字 == 布尔 布尔类型转换为数字")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"6"}},[a("li",[t._v("数字 == 字符串，字符串转换为数字")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("例如：5 == '5' // 为 true\n")])])]),a("ul",[a("li",[a("ol",{attrs:{start:"7"}},[a("li",[t._v("字符串 == 布尔 都转换为数字")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"8"}},[a("li",[t._v("null === undefined 结果是true")])])])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("ul",[a("li",[a("ol",{attrs:{start:"9"}},[a("li",[t._v("null和undefined 和其他任何数据类型都不相等")])])])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("h5",{attrs:{id:"_3、除了-是比较-也是比较-绝对比较-如果数据类型不一样肯定不相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、除了-是比较-也是比较-绝对比较-如果数据类型不一样肯定不相等"}},[t._v("#")]),t._v(" 3、除了== 是比较，===也是比较(绝对比较)，如果数据类型不一样肯定不相等")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" fasle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("h4",{attrs:{id:"_3、typeof-数据类型检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、typeof-数据类型检测"}},[t._v("#")]),t._v(" 3、typeof（数据类型检测）")]),t._v(" "),a("blockquote",[a("p",[t._v("typeof 用来检测数据类型的，用法：typeof + 要检查的值,")])]),t._v(" "),a("p",[t._v('返回一个字符串，包含了数据类型的字符( "number","string","boolean","undefined","function","object")')]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("typeof null")]),t._v(" 返回的结果是 "),a("strong",[t._v('"object"')])])]),t._v(" "),a("li",[a("p",[t._v('typeof undefined 返回的结果是 "undefined"')])]),t._v(" "),a("li",[a("p",[t._v('typeof null 结果是 "object"')])]),t._v(" "),a("li",[a("p",[t._v('typeof [] 结果是 "object"')])])]),t._v(" "),a("blockquote",[a("p",[t._v('注意：同为对象数据类型的 数组、正则、对象的检测类型都是"object"')])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("typeof 局限性")]),t._v("：不能具体的检查object下细分的类型")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  console.log(typeof typeof typeof typeof []) // "string"  此处打印的是"string"\n')])])]),a("blockquote",[a("p",[t._v('tip：因为typeof 返回的值就是一个字符串，如果用到了两个以及两个以上的typeof 返回的都是 "string"类型')])]),t._v(" "),a("h3",{attrs:{id:"_4、基本数据类型和引用数据类型的本质区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、基本数据类型和引用数据类型的本质区别"}},[t._v("#")]),t._v(" 4、基本数据类型和引用数据类型的本质区别")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('情景一:\n    var num1 = 12;\n    var num2 = num1;\n    num2++;\n    console.log(num1);\n   \n    \n情景二:\n    var obj1 = {"name":"张三"};\n    var obj2 = obj1;\n    obj2.name = "李四";\n    console.log(obj1.name);\n\n    情景一打印的值为 12, 情景二打印的值为 "李四"\n\n')])])]),a("blockquote",[a("p",[t._v('分析：基本数据类型的值是具体的值，此处的var num2=num1;就是将num1的值 12给num2，此时num2和num1的值同为12，但是和num1的num2的值互不相关，所以不论num2怎么变，num1都是12，都不会改变。引用数据类型，存储的是数据内存的地址，var obj1 = {"name":"张三"} 是开辟一个空间来存放{"name":"张三"}值，然后将obj1指向存储值的地址，此时，var obj2 = obj1,就是将obj1指向内存空间的地址赋值给obj2，两个都指向同一个内存地址，对应的同一个值。所以后面obj2更改内存空间里面name的值后，obj1的值也会改变。')])])])}),[],!1,null,null,null);s.default=e.exports}}]);