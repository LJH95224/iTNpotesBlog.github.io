(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{520:function(n,t,e){"use strict";e.r(t);var r=e(42),a=Object(r.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"深拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝"}},[n._v("#")]),n._v(" 深拷贝")]),n._v(" "),e("h2",{attrs:{id:"深拷贝实现方法一"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝实现方法一"}},[n._v("#")]),n._v(" 深拷贝实现方法一")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const obj = {\n\tname: 'Alfred',\n\tage: 26,\n\taddress: {\n\t\tcity: beijing\n\t},\n\tarr: ['a', 'b', 'c']\n}\n\n/**\n * 深拷贝\n * @param {Object} obj 要拷贝的对象\n * @description 思路：\n * 1、首先用typeof判断传入的对象的类型是不是 Array， Object 或者传入对象是不是为 null\n * 2、如果不是类型不是 Array 和 Object 或者传入对象为 null 。则不需要深拷贝，直接返回就可以\n * 3、如果传入的对象的typeof 为 object 说明传入对象可能是数组也可能为对象类型。\n * 4、首先初始化 返回结果result，再用 instanceof 具体判断传入的对象是不是 Array, 是 Array 则将 result 赋值为一个空数组。\n * 5、不是Array 类型，则肯定就是对象，那么就需要将 result 赋值为一个空对象\n * 6、使用 for in 循环 开始循环遍历数组或者对象的属性，遍历的时候需要使用 hasOwnProperty 来判断，保证 key 不是原型的数学。\n * 7、将obj[key] 递归遍历 赋值给 result[key]\n * 8、最后再返回 result 就是 深拷贝之后的对象\n */\nfunction deepClone (obj ={}) {\n\tif (typeof obj !== 'object' || obj == null) {\n    return obj\n\t}\n  // 初始化返回结果\n  let result;\n  if (obj instanceof Array) {\n    result = []\n  } else {\n    result = {}\n  }\n\n  for (let key in obj) {\n    // 保证 key 不是原型的属性\n    if (obj.hasOwnProperty(key)) {\n      // 递归调用\n      result[key] = deepClone(obj[key])\n    }\n  }\n  return result\n}\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);