(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{498:function(n,t,s){"use strict";s.r(t);var a=s(42),e=Object(a.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"_1-let-和-const-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-let-和-const-命令"}},[n._v("#")]),n._v(" 1. let 和 const 命令")]),n._v(" "),s("blockquote",[s("ol",[s("li",[n._v("let命令")]),n._v(" "),s("li",[n._v("块级作用域")]),n._v(" "),s("li",[n._v("const命令")]),n._v(" "),s("li",[n._v("顶层对象的属性")]),n._v(" "),s("li",[n._v("global对象")])])]),n._v(" "),s("h1",{attrs:{id:"_1-let命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-let命令"}},[n._v("#")]),n._v(" 1. let命令")]),n._v(" "),s("h2",{attrs:{id:"基本用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[n._v("#")]),n._v(" 基本用法")]),n._v(" "),s("p",[s("strong",[n._v("ES6")]),n._v(" 新增了 "),s("strong",[n._v("let")]),n._v(" 命令，用来声明变量。它的用法类似于 "),s("strong",[n._v("var")]),n._v(" ，但是所声明的变量，只在 "),s("strong",[n._v("let")]),n._v(" 命令所在的代码块内有效。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("{\n  let a = 10;\n  var b = 1;\n}\n\na // ReferenceError: a is not defined.\nb // 1\n")])])]),s("p",[n._v("上面代码在代码块之中，分别用 "),s("strong",[n._v("let")]),n._v(" 和 "),s("strong",[n._v("var")]),n._v(" 声明了两个变量。然后在代码块之外调用这两个变量，结果 "),s("strong",[n._v("let")]),n._v(" 声明的变量报错，"),s("strong",[n._v("var")]),n._v("  声明的变量返回了正确的值。这表明，"),s("strong",[n._v("let")]),n._v(" 声明的变量只在它所在的代码块有效。")]),n._v(" "),s("p",[n._v("for循环的计数器，就很合适使用let命令。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("for (let i = 0; i < 10; i++) {\n  // ...\n}\n\nconsole.log(i);\n// ReferenceError: i is not defined\n")])])]),s("p",[n._v("上面代码中，计数器 "),s("font",{attrs:{color:"red"}},[n._v("i")]),n._v(" 只在 "),s("font",{attrs:{color:"red"}},[n._v("for")]),n._v(" 循环体内有效，在循环体外引用就会报错。"),s("br")],1),n._v(" "),s("p",[n._v("下面的代码如果使用 "),s("strong",[n._v("var")]),n._v(" ，最后输出的是 "),s("strong",[n._v("10")]),n._v("。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("var a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 10\n")])])]),s("p",[n._v("上面代码中，变量 "),s("strong",[n._v("i")]),n._v(" 是 "),s("strong",[n._v("var")]),n._v(" 命令声明的，在全局范围内都有效，所以全局只有一个变量 "),s("strong",[n._v("i")]),n._v("。每一次循环，变量 "),s("strong",[n._v("i")]),n._v(" 的值都会发生改变，而循环内被赋给数组 "),s("strong",[n._v("a")]),n._v(" 的函数内部的"),s("strong",[n._v("console.log(i)")]),n._v("，里面的i指向的就是全局的 "),s("strong",[n._v("i")]),n._v("。也就是说，所有数组 "),s("strong",[n._v("a")]),n._v(" 的成员里面的 "),s("strong",[n._v("i")]),n._v("，指向的都是同一个 "),s("strong",[n._v("i")]),n._v("，导致运行时输出的是最后一轮的 "),s("strong",[n._v("i")]),n._v(" 的值，也就是 "),s("strong",[n._v("10")]),n._v("。")]),n._v(" "),s("p",[n._v("如果使用 "),s("strong",[n._v("let")]),n._v("，声明的变量仅在块级作用域内有效，最后输出的是 "),s("strong",[n._v("6")]),n._v("。")]),n._v(" "),s("p",[n._v("上面代码中，变量 "),s("strong",[n._v("i")]),n._v(" 是 "),s("strong",[n._v("let")]),n._v(" 声明的，当前的 "),s("strong",[n._v("i")]),n._v(" 只在本轮循环有效，所以每一次循环的 "),s("strong",[n._v("i")]),n._v(" 其实都是一个新的变量，所以最后输出的是 "),s("strong",[n._v("6")]),n._v(" 。你可能会问，如果每一轮循环的变量i都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 "),s("strong",[n._v("JavaScript")]),n._v(" 引擎内部会记住上一轮循环的值，初始化本轮的变量 "),s("strong",[n._v("i")]),n._v(" 时，就在上一轮循环的基础上进行计算。")]),n._v(" "),s("p",[n._v("另外，"),s("strong",[n._v("for")]),n._v(" 循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("for (let i = 0; i < 3; i++) {\n  let i = 'abc';\n  console.log(i);\n}\n// abc\n// abc\n// abc\n")])])]),s("p",[n._v("上面代码正确运行，输出了 "),s("strong",[n._v("3")]),n._v(" 次 "),s("strong",[n._v("abc")]),n._v("。这表明函数内部的变量i与循环变量i不在同一个作用域，有各自单独的作用域。")]),n._v(" "),s("h2",{attrs:{id:"不存在变量提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不存在变量提升"}},[n._v("#")]),n._v(" 不存在变量提升")]),n._v(" "),s("p",[s("strong",[n._v("var")]),n._v(" 命令会发生”变量提升“现象，即变量可以在声明之前使用，值为 "),s("strong",[n._v("undefined")]),n._v("。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。")]),n._v(" "),s("p",[n._v("为了纠正这种现象，"),s("strong",[n._v("let")]),n._v(" 命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n")])])]),s("p",[n._v("上面代码中，变量 "),s("strong",[n._v("foo")]),n._v(" 用 "),s("strong",[n._v("var")]),n._v(" 命令声明，会发生变量提升，即脚本开始运行时，变量 "),s("strong",[n._v("foo")]),n._v(" 已经存在了，但是没有值，所以会输出 "),s("strong",[n._v("undefined")]),n._v("。变量 "),s("strong",[n._v("bar")]),n._v(" 用 "),s("strong",[n._v("let")]),n._v(" 命令声明，不会发生变量提升。这表示在声明它之前，变量 "),s("strong",[n._v("bar")]),n._v(" 是不存在的，这时如果用到它，就会抛出一个错误。")]),n._v(" "),s("h2",{attrs:{id:"暂时性死区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂时性死区"}},[n._v("#")]),n._v(" 暂时性死区")]),n._v(" "),s("p",[n._v("只要块级作用域内存在 "),s("strong",[n._v("let")]),n._v(" 命令，它所声明的变量就“绑定” "),s("strong",[n._v("(binding)")]),n._v(" 这个区域，不再受外部的影响。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("var tmp = 123;\n\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n")])])]),s("p",[n._v("上面代码中，存在全局变量 "),s("strong",[n._v("tmp")]),n._v("，但是块级作用域内 "),s("strong",[n._v("let")]),n._v(" 又声明了一个局部变量 "),s("strong",[n._v("tmp")]),n._v("，导致后者绑定这个块级作用域，所以在let声明变量前，对 "),s("strong",[n._v("tmp")]),n._v(" 赋值会报错。")]),n._v(" "),s("p",[s("strong",[n._v("ES6")]),n._v(" 明确规定，如果区块中存在 "),s("strong",[n._v("let")]),n._v(" 和 "),s("strong",[n._v("const")]),n._v(" 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。")]),n._v(" "),s("p",[n._v("总之，在代码块内，使用 "),s("strong",[n._v("let")]),n._v(" 命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（"),s("strong",[n._v("temporal dead zone")]),n._v("，简称 "),s("strong",[n._v("TDZ")]),n._v("）。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("if (true) {\n  // TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n")])])]),s("p",[n._v("上面代码中，在 "),s("strong",[n._v("let")]),n._v(" 命令声明变量 "),s("strong",[n._v("tmp")]),n._v(" 之前，都属于变量 "),s("strong",[n._v("tmp")]),n._v(" 的“死区”。")]),n._v(" "),s("p",[n._v("“暂时性死区”也意味着 "),s("strong",[n._v("typeof")]),n._v(" 不再是一个百分之百安全的操作。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("typeof x; // ReferenceError\nlet x;\n")])])]),s("p",[n._v("上面代码中，变量 "),s("strong",[n._v("x")]),n._v(" 使用 "),s("strong",[n._v("let")]),n._v(" 命令声明，所以在声明之前，都属于 "),s("strong",[n._v("x")]),n._v(" 的“死区”，只要用到该变量就会报错。因此，"),s("strong",[n._v("typeof")]),n._v(" 运行时就会抛出一个 "),s("strong",[n._v("ReferenceError")]),n._v("。")]),n._v(" "),s("p",[n._v("作为比较，如果一个变量根本没有被声明，使用 "),s("strong",[n._v("typeof")]),n._v(" 反而不会报错。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('typeof undeclared_variable // "undefined"\n')])])]),s("p",[n._v("上面代码中，"),s("strong",[n._v("undeclared_variable")]),n._v(" 是一个不存在的变量名，结果返回“"),s("strong",[n._v("undefined")]),n._v("”。所以，在没有let之前，"),s("strong",[n._v("typeof")]),n._v(" 运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。")]),n._v(" "),s("p",[n._v("有些“死区”比较隐蔽，不太容易发现。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function bar(x = y, y = 2) {\n  return [x, y];\n}\n\nbar(); // 报错\n")])])]),s("p",[n._v("上面代码中，调用 "),s("strong",[n._v("bar")]),n._v(" 函数之所以报错（某些实现可能不报错），是因为参数 "),s("strong",[n._v("x")]),n._v(" 默认值等于另一个参数 "),s("strong",[n._v("y")]),n._v("，而此时 "),s("strong",[n._v("y")]),n._v(" 还没有声明，属于”死区“。如果 "),s("strong",[n._v("y")]),n._v(" 的默认值是 "),s("strong",[n._v("x")]),n._v("，就不会报错，因为此时 "),s("strong",[n._v("x")]),n._v(" 已经声明了。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function bar(x = 2, y = x) {\n  return [x, y];\n}\nbar(); // [2, 2]\n")])])]),s("p",[n._v("另外，下面的代码也会报错，与 "),s("strong",[n._v("var")]),n._v(" 的行为不同。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 不报错\nvar x = x;\n\n// 报错\nlet x = x;\n// ReferenceError: x is not defined\n")])])]),s("p",[n._v("上面代码报错，也是因为暂时性死区。使用 "),s("strong",[n._v("le")]),n._v(" 声明变量时，只要变量在还没有声明完成前使用，就会报错。上面这行就属于这个情况，在变量 "),s("strong",[n._v("x")]),n._v(" 的声明语句还没有执行完成前，就去取 "),s("strong",[n._v("x")]),n._v(" 的值，导致报错” "),s("strong",[n._v("x")]),n._v(" 未定义“。")]),n._v(" "),s("p",[n._v("E"),s("strong",[n._v("S6")]),n._v(" 规定暂时性死区和 "),s("strong",[n._v("let")]),n._v("、"),s("strong",[n._v("const")]),n._v(" 语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 "),s("strong",[n._v("ES5")]),n._v(" 是很常见的，现在有了这种规定，避免此类错误就很容易了。")]),n._v(" "),s("p",[n._v("总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。")]),n._v(" "),s("h2",{attrs:{id:"不允许重复声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不允许重复声明"}},[n._v("#")]),n._v(" 不允许重复声明")]),n._v(" "),s("p",[s("strong",[n._v("let")]),n._v(" 不允许在相同作用域内，重复声明同一个变量。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 报错\nfunction func() {\n  let a = 10;\n  var a = 1;\n}\n\n// 报错\nfunction func() {\n  let a = 10;\n  let a = 1;\n}\n")])])]),s("p",[n._v("因此，不能在函数内部重新声明参数。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function func(arg) {\n  let arg; // 报错\n}\n\nfunction func(arg) {\n  {\n    let arg; // 不报错\n  }\n}\n")])])]),s("hr"),n._v(" "),s("h1",{attrs:{id:"_2-块级作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-块级作用域"}},[n._v("#")]),n._v(" 2. 块级作用域")]),n._v(" "),s("h2",{attrs:{id:"为什么需要块级作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要块级作用域"}},[n._v("#")]),n._v(" 为什么需要块级作用域")]),n._v(" "),s("p",[s("strong",[n._v("ES5")]),n._v(" 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。")]),n._v(" "),s("p",[n._v("第一种场景，内层变量可能会覆盖外层变量。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("var tmp = new Date();\n\nfunction f() {\n  console.log(tmp);\n  if (false) {\n    var tmp = 'hello world';\n  }\n}\n\nf(); // undefined\n")])])]),s("p",[n._v("上面代码的原意是，"),s("strong",[n._v("if")]),n._v(" 代码块的外部使用外层的 "),s("strong",[n._v("tmp")]),n._v(" 变量，内部使用内层的 "),s("strong",[n._v("tmp")]),n._v(" 变量。但是，函数 "),s("strong",[n._v("f")]),n._v(" 执行后，输出结果为 "),s("strong",[n._v("undefined")]),n._v("，原因在于变量提升，导致内层的 "),s("strong",[n._v("tmp")]),n._v(" 变量覆盖了外层的 "),s("strong",[n._v("tmp")]),n._v(" 变量。")]),n._v(" "),s("p",[n._v("第二种场景，用来计数的循环变量泄露为全局变量。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("var s = 'hello';\n\nfor (var i = 0; i < s.length; i++) {\n  console.log(s[i]);\n}\n\nconsole.log(i); // 5\n")])])]),s("p",[n._v("上面代码中，变量 "),s("strong",[n._v("i")]),n._v(" 只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。")]),n._v(" "),s("h2",{attrs:{id:"es6的块级作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6的块级作用域"}},[n._v("#")]),n._v(" ES6的块级作用域")]),n._v(" "),s("p",[s("strong",[n._v("let")]),n._v(" 实际上为JavaScript新增了块级作用域")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function f1() {\n    let n = 5;\n    if (true) {\n        let n = 10;\n    }\n    console.log(n)  // 5\n}\n")])])]),s("p",[n._v("上面的函数，有两个代码块，都声明了变量 "),s("strong",[n._v("n")]),n._v("，运行后输出5。这表示外层代码块不受内层代码块的影响。如果两次多使用 "),s("strong",[n._v("var")]),n._v(" 定义变量 "),s("strong",[n._v("n")]),n._v("，最后输出的值才是10。")]),n._v(" "),s("p",[n._v("ES6 允许块级作用域的任意嵌套")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("{{{{{ let insane = 'hello World' }}}}}\n")])])]),s("br"),n._v("\n上面代码使用了一个五层的块级作用域。外层作用域无法读取内层作用域的变量\n"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("{{{{\n    { let insane = 'hello World' }\n    console.log(insane); // 报错\n}}}}\n")])])]),s("br"),n._v("\n内层作用域可以定义外层作用域的同名变量。\n"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("{{{{\n  let insane = 'Hello World';\n  {let insane = 'Hello World'}\n}}}};\n")])])]),s("br"),n._v("\n块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。\n"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// IIFE 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n")])])]),s("h2",{attrs:{id:"块级作用域与函数声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域与函数声明"}},[n._v("#")]),n._v(" 块级作用域与函数声明")]),n._v(" "),s("p",[n._v("函数能不能在块级作用域之中声明？这是一个相当令人混淆的问题。")]),n._v(" "),s("p",[n._v("ES5规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 情况一\nif (true) {\n  function f() {}\n}\n\n// 情况二\ntry {\n  function f() {}\n} catch(e) {\n  // ...\n}\n")])])]),s("p",[n._v("上面两种函数声明，根据ES5的规定都是非法的")]),n._v(" "),s("p",[n._v("但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数，因此上面两种情况实际都能运行，不会报错。")]),n._v(" "),s("p",[n._v("ES6引入块级作用域，明确允许在块级作用域之中声明函数。ES6规定，块级作用域之中，函数声明语句的行为类似于 "),s("strong",[n._v("let")]),n._v(" ，在块级作用域之外不可引用。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function f() { console.log('I am outside!'); }\n\n(function () {\n  if (false) {\n    // 重复声明一次函数f\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n")])])]),s("p",[n._v("上面代码在 ES5 中运行，会得到“I am inside!”，因为在 "),s("strong",[n._v("if")]),n._v(" 内声明的函数 "),s("strong",[n._v("f")]),n._v(" 会被提升到函数头部，实际运行代码如下：")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// ES5 环境\nfunction f() { console.log('I am outside!'); }\n\n(function () {\n  function f() { console.log('I am inside!'); }\n  if (false) {\n  }\n  f();\n}());\n")])])]),s("br"),n._v("\nES6 就完全不一样了，理论上会得到“I am outside!”。因为块级作用域内声明的函数类似于 __let__ ，对作用域之外没有影响。但是，如果你真的在 ES6 浏览器中运行一下上面的代码，是会报错的，这是为什么呢？\n"),s("p",[n._v("原来，如果改变了块级作用域内声明的函数的处理规则，显然会对老代码产生很大影响。为了减轻因此产生的不兼容问题，ES6 在"),s("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-block-level-function-declarations-web-legacy-compatibility-semantics",target:"_blank",rel:"noopener noreferrer"}},[n._v("附录 B"),s("OutboundLink")],1),n._v("里面规定，浏览器的实现可以不遵守上面的规定，有自己的"),s("a",{attrs:{href:"https://stackoverflow.com/questions/31419897/what-are-the-precise-semantics-of-block-level-functions-in-es6",target:"_blank",rel:"noopener noreferrer"}},[n._v("行为方式"),s("OutboundLink")],1),n._v("。")]),n._v(" "),s("blockquote",[s("ul",[s("li",[n._v("允许在块级作用域内声明函数")]),n._v(" "),s("li",[n._v("函数声明类似于 "),s("strong",[n._v("var")]),n._v("，即会提升到全局作用域或函数作用域的头部")]),n._v(" "),s("li",[n._v("同时，函数声明还会提升到所在的块级作用域的头部")])])]),n._v(" "),s("p",[n._v("注意，上面三条规则只对 ES6 的浏览器实现有效，其他环境的实现不用遵守，还是将块级作用域的函数声明当作 "),s("strong",[n._v("let")]),n._v(" 处理。")]),n._v(" "),s("p",[n._v("根据这三条规则，在浏览器的 ES6 环境中，块级作用域内声明的函数，行为类似于 "),s("strong",[n._v("var")]),n._v(" 声明的变量。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 浏览器的 ES6 环境\nfunction f() { console.log('I am outside!'); }\n\n(function () {\n  if (false) {\n    // 重复声明一次函数f\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n// Uncaught TypeError: f is not a function\n")])])]),s("p",[n._v("上面的代码在符合 ES6 的浏览器中，都会报错，因为实际运行的是下面的代码。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 浏览器的 ES6 环境\nfunction f() { console.log('I am outside!'); }\n(function () {\n  var f = undefined;\n  if (false) {\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n// Uncaught TypeError: f is not a function\n")])])]),s("p",[n._v("考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 函数声明语句\n{\n  let a = 'secret';\n  function f() {\n    return a;\n  }\n}\n\n// 函数表达式\n{\n  let a = 'secret';\n  let f = function () {\n    return a;\n  };\n}\n")])])]),s("p",[n._v("另外，还有一个需要注意的地方。ES6 的块级作用域允许声明函数的规则，只在使用大括号的情况下成立，如果没有使用大括号，就会报错。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 不报错\n'use strict';\nif (true) {\n  function f() {}\n}\n\n// 报错\n'use strict';\nif (true)\n  function f() {}\n")])])]),s("hr"),n._v(" "),s("h1",{attrs:{id:"_3-const命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-const命令"}},[n._v("#")]),n._v(" 3. const命令")]),n._v(" "),s("h2",{attrs:{id:"基本用法-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本用法-2"}},[n._v("#")]),n._v(" 基本用法")]),n._v(" "),s("p",[s("strong",[n._v("const")]),n._v(" 声明一个只读变量。一旦声明，常量的值就不能改变。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const PI = 3.1415;\nPI // 3.1415\n\nPI = 3;\n// TypeError: Assignment to constant variable.\n")])])]),s("p",[n._v("上面代码表明改变常量的值会报错。")]),n._v(" "),s("p",[n._v("__const__声明的变量不得改变值，这意味着， "),s("strong",[n._v("const")]),n._v(" 一旦声明变量，就必须立即初始化，不能留到以后赋值")]),n._v(" "),s("br"),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const foo;\n// SyntaxError: Missing initializer in const declaration\n")])])]),s("p",[n._v("上面代码表示，对于 "),s("strong",[n._v("const")]),n._v(" 来说，只声明不赋值，就会报错。")]),n._v(" "),s("p",[s("strong",[n._v("const")]),n._v(" 的作用域与 "),s("strong",[n._v("let")]),n._v(" 命令相同：只在声明所在的块级作用域内有效。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("if (true) {\n  const MAX = 5;\n}\n\nMAX // Uncaught ReferenceError: MAX is not defined\n")])])]),s("br"),n._v("\nconst命令声明的变量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用\n"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("if (true) {\n  console.log(MAX); // ReferenceError\n  const MAX = 5;\n}\n")])])]),s("p",[n._v("上面代码在常量MAX声明之前就调用，结果报错。")]),n._v(" "),s("br"),n._v("\n __const__ 声明的常量，也与 __let__ 一样，不可重复声明。\n"),s("h2",{attrs:{id:"本质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本质"}},[n._v("#")]),n._v(" 本质")]),n._v(" "),s("p",[s("strong",[n._v("const")]),n._v(" 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动，对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针， __const__只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('const foo = {}\n\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // TypeError: "foo" is read-only\n')])])]),s("p",[n._v("上面代码中，常量  "),s("strong",[n._v("foo")]),n._v(" 储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把 "),s("strong",[n._v("foo")]),n._v(" 指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。")]),n._v(" "),s("br"),n._v("\n下面是另一个例子。\n"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const a = [];\na.push('Hello'); // 可执行\na.length = 0;    // 可执行\na = ['Dave']     // 报错\n")])])]),s("p",[n._v("上面代码中， 常量 "),s("strong",[n._v("a")]),n._v(" 是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给 "),s("strong",[n._v("a")]),n._v("， 就会报错。")]),n._v(" "),s("p",[n._v("如果真的想将对象冻结，应该使用 "),s("strong",[n._v("Object.freeze")]),n._v(" 方法。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("const foo = Object.freeze({});\n\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n")])])]),s("p",[n._v("上面代码中，常量 "),s("strong",[n._v("foo")]),n._v(" 指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。")]),n._v(" "),s("p",[n._v("除了将对象本身冻结，对象的属性也应该冻结，下面是一个将对象彻底冻结的函数。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("var constantize = (obj) => {\n    Object.freeze(obj);\n    Object.keys(obj).forEach( (key, i) => {\n        if (typeif obj[key] __= 'object') {\n            constantize( obj[key] )\n        }  \n    })\n}\n")])])]),s("h2",{attrs:{id:"es6声明变量的六种方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6声明变量的六种方法"}},[n._v("#")]),n._v(" ES6声明变量的六种方法")]),n._v(" "),s("p",[n._v("ES5 只有两种声明变量的方法： "),s("strong",[n._v("var")]),n._v(" 命令和 "),s("strong",[n._v("function")]),n._v(" 命令。ES6除了添加 "),s("strong",[n._v("let")]),n._v(" 和 "),s("strong",[n._v("const")]),n._v(" 命令，后面章节还会提到，另外两种声明变量的方法： "),s("strong",[n._v("import")]),n._v(" 命令和 "),s("strong",[n._v("class")]),n._v(" 命令，所以ES6一共有6中声明变量的方法")]),n._v(" "),s("hr"),n._v(" "),s("br"),n._v(" "),s("h1",{attrs:{id:"_4-顶层对象的属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-顶层对象的属性"}},[n._v("#")]),n._v(" 4. 顶层对象的属性")]),n._v(" "),s("p",[n._v("顶层对象，在浏览器环境指的是 "),s("strong",[n._v("window")]),n._v(" 对象，在Node指的是 "),s("strong",[n._v("global")]),n._v(" 对象。ES5之中，顶层对象的属性与全局变量是等价的")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("window.a = 1;\na // 1\n\na = 2;\nwindow.a //2\n\n")])])]),s("p",[n._v("上面代码中，顶层对象的赋值与全局变量的赋值，是同一件事。")]),n._v(" "),s("p",[n._v("顶层对象的属性与全局变量挂钩，被认为是JavaScript语言最大的设计败笔之一。这样的设计带来了几个很大的问题，首先是没发在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）；其次，程序员很容易不知不觉地就创建了全局变量（比如打字出错）；最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程。另一方面，"),s("strong",[n._v("window")]),n._v(" 对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。")]),n._v(" "),s("p",[n._v("ES6为了改变这一点，一方面规定，为了保持兼容性， "),s("strong",[n._v("var")]),n._v(" 命令和 "),s("strong",[n._v("function")]),n._v(" 命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，"),s("strong",[n._v("let")]),n._v(" 命令，"),s("strong",[n._v("const")]),n._v(" 命令、"),s("strong",[n._v("class")]),n._v(" 命令声明的全局变量，不属于顶层对象的属性。也就是说，从ES6开始，全局变量将足部与顶层对象的属性脱钩")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("var a = 1;\n// 如果在 Node 的 REPL 环境，可以写成 global.a\n// 或者采用通用方法，写成 this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n")])])]),s("p",[n._v("上面代码中，全局变量 "),s("strong",[n._v("a")]),n._v(" 由 "),s("strong",[n._v("var")]),n._v(" 命令声明，所以它是顶层对象的属性；全局变量 "),s("strong",[n._v("b")]),n._v(" 由 "),s("strong",[n._v("let")]),n._v(" 命令声明，所以它不是顶层对象的属性，返回 "),s("strong",[n._v("undefined")]),n._v(" 。")]),n._v(" "),s("hr"),n._v(" "),s("br"),n._v(" "),s("h1",{attrs:{id:"_5-global-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-global-对象"}},[n._v("#")]),n._v(" 5. global 对象")]),n._v(" "),s("p",[n._v("ES5的顶层对象，本身也是一个问题，因为他在各种实现里面是不统一的。")]),n._v(" "),s("blockquote",[s("ul",[s("li",[n._v("浏览器里面，顶层对象是 "),s("strong",[n._v("window")]),n._v("，但 Node 和 Web Worker 没有 "),s("strong",[n._v("window")]),n._v("。")]),n._v(" "),s("li",[n._v("浏览器和 Web Worker里面， self也指向顶层对象，但是 Node 没有 self。")]),n._v(" "),s("li",[n._v("Node 里面，顶层对象是 "),s("strong",[n._v("global")]),n._v("，但其他环境都不支持。")])])]),n._v(" "),s("p",[n._v("同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用 "),s("strong",[n._v("this")]),n._v(" 变量，但是有局限性。")]),n._v(" "),s("blockquote",[s("ul",[s("li",[n._v("全局环境中，"),s("strong",[n._v("this")]),n._v(" 会返回顶层对象，但是，Node模块和 ES6 模块中，"),s("strong",[n._v("this")]),n._v(" 返回的是当前模块。")]),n._v(" "),s("li",[n._v("函数里面的 "),s("strong",[n._v("this")]),n._v("， 如果函数不是作为对象方法运行，而是单纯作为函数运行，"),s("strong",[n._v("this")]),n._v(" 会指向顶层对象。但是，在严格模式下，这时 "),s("strong",[n._v("this")]),n._v(" 会返回 "),s("strong",[n._v("undefined")]),n._v("。")]),n._v(" "),s("li",[n._v("不管是严格模式，还是普通模式， new Function('return this')(), 总是会返回全局对象。但是，如果浏览器用了 CSP （Content Security Policy， 内容安全策略），那么 "),s("strong",[n._v("eval")]),n._v("、 "),s("strong",[n._v("new Function")]),n._v(" 这些方法都可能无法使用。")])])]),n._v(" "),s("p",[n._v("综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 方法一\n(typeof window !__ 'undefined'\n   ? window\n   : (typeof process __= 'object' &&\n      typeof require __= 'function' &&\n      typeof global __= 'object')\n     ? global\n     : this);\n\n// 方法二\nvar getGlobal = function () {\n  if (typeof self !__ 'undefined') { return self; }\n  if (typeof window !__ 'undefined') { return window; }\n  if (typeof global !__ 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n")])])]),s("p",[n._v("现在有一个提案，在语言标准的层面，引入 "),s("strong",[n._v("global")]),n._v(" 作为顶层对象。也就是说，在所有环境下，global都是存在的，都可以从它拿到顶层对象。")]),n._v(" "),s("p",[n._v("垫片库 "),s("strong",[n._v("system.global")]),n._v(" 模拟了这个提案，可以在所有环境拿到 "),s("strong",[n._v("global")]),n._v("。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// CommonJS 的写法\nrequire('system.global/shim')();\n\n// ES6 模块的写法\nimport shim from 'system.global/shim'; shim();\n")])])]),s("p",[n._v("上面代码可以保证各种环境里面，"),s("strong",[n._v("global")]),n._v(" 对象都是存在的。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// CommonJS 的写法\nvar global = require('system.global')();\n\n// ES6 模块的写法\nimport getGlobal from 'system.global';\nconst global = getGlobal();\n")])])]),s("p",[n._v("上面代码将顶层对象放入变量 "),s("strong",[n._v("global")]),n._v("。")])])}),[],!1,null,null,null);t.default=e.exports}}]);