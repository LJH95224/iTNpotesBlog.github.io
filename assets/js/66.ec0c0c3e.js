(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{496:function(a,t,e){"use strict";e.r(t);var s=e(42),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"_2-变量的解构赋值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-变量的解构赋值"}},[a._v("#")]),a._v(" 2. 变量的解构赋值")]),a._v(" "),e("blockquote",[e("ol",[e("li",[a._v("数组的解构赋值")]),a._v(" "),e("li",[a._v("对象的解构赋值")]),a._v(" "),e("li",[a._v("字符串的解构赋值")]),a._v(" "),e("li",[a._v("数值和布尔值的解构赋值")]),a._v(" "),e("li",[a._v("函数参数的解构赋值")]),a._v(" "),e("li",[a._v("圆括号问题")]),a._v(" "),e("li",[a._v("用途")])])]),a._v(" "),e("h1",{attrs:{id:"_1-数组的解构赋值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-数组的解构赋值"}},[a._v("#")]),a._v(" 1. 数组的解构赋值")]),a._v(" "),e("h2",{attrs:{id:"基本用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[a._v("#")]),a._v(" 基本用法")]),a._v(" "),e("p",[a._v("ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。")]),a._v(" "),e("p",[a._v("以前，为变量赋值，只能直接指定值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let a = 1;\nlet b = 2;\nlet c = 3;\n")])])]),e("p",[a._v("ES6 允许写成下面这样")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let [a, b, c] = [1, 2, 3]\n")])])]),e("p",[a._v("上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。")]),a._v(" "),e("p",[a._v("本质上，这种写法属于‘模式匹配’，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo  // 1\nbar  // 2\nbaz  // 3\n\nlet [ , , third] = ['foo', 'bar', 'baz'];\nthird  // baz\n\nlet [x, , y] = [1, 2, 3];\nx  // 1\ny  // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead  // 1\ntail  // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx   // 'a'\ny   // undefined\nz   // []\n")])])]),e("p",[a._v("如果解构不成功，变量的值就等于undefined。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let [foo] = [];\nlet [bar, foo] = [1];\n")])])]),e("p",[a._v("以上两种情况都属于解构不成功，foo的值都会等于undefined。")]),a._v(" "),e("br"),a._v("\n另一种情况是不完全解构，即等号左边的模式，只能匹配一部分的等号右边的数组，这种情况下，结构依然可以成功。\n"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let [x, y] = [1, 2, 3];\nx // 1\ny // 2\n\nlet [a, [b], d] = [1, [2, 3], 4];\na // 1\nb // 2\nd // 4\n")])])]),e("p",[a._v("上面两个例子，都属于不完全解构，但是可以成功。")]),a._v(" "),e("p",[a._v("如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 报错\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = NaN;\nlet [foo] = undefined;\nlet [foo] = null;\nlet [foo] = {};\n")])])]),e("p",[a._v("上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator接口（最后一个表达式）。")]),a._v(" "),e("p",[a._v("对于 Set 结构，也可以使用数组的解构赋值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let [x, y, z] = new Set(['a', 'b', 'c']);\nx   // 'a'\n")])])]),e("p",[a._v("事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function* fibs() {\n  let a = 0;\n  let b = 1;\n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}\n\nlet [first, second, third, fourth, fifth, sixth] = fibs();\nsixth // 5\n")])])]),e("p",[a._v("上面代码中，fibs是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。")]),a._v(" "),e("h2",{attrs:{id:"默认值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#默认值"}},[a._v("#")]),a._v(" 默认值")]),a._v(" "),e("p",[a._v("解构赋值允许使用默认值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let [foo = true] = [];\nfoo //true\n\nlet [x, y = 'b'] = ['a']    // x = 'a', y = 'b'\nlet [x, y = 'b'] = ['a', undefined];    // x = 'a', y = 'b'\n")])])]),e("p",[a._v("注意， ES6内部使用严格相等运算符（===）， 判断一个位置是否有值，所以，只有当一个数组成员严格等于 "),e("strong",[a._v("undefined")]),a._v("，默认值才会生效")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let [x = 1] = [undefined];\nx // 1\n\nlet [x = 1] = [null];\nx // null\n")])])]),e("p",[a._v("上面代码中，如果一个数组成员是 "),e("strong",[a._v("null")]),a._v(" ，默认值就不会生效，因为 "),e("strong",[a._v("null")]),a._v(" 不严格等于 "),e("strong",[a._v("undefined")]),a._v("。")]),a._v(" "),e("p",[a._v("如果默认值是一个表达式， 那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function f() {\n  console.log('aaa');\n}\n\nlet [x = f()] = [1];\n")])])]),e("p",[a._v("上面代码中，因为 "),e("strong",[a._v("x")]),a._v(" 能取到值，所以函数 "),e("strong",[a._v("f")]),a._v(" 根本不会执行。上面的代码其实等价于下面的代码。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let x;\nif ([1][0] === undefined) {\n    x = f();\n} else {\n    x = [1][0]\n}\n")])])]),e("p",[a._v("默认值可以引用解构赋值的其他变量，但该变量必须已经声明。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let [x = 1, y = x] = [];     // x=1; y=1\nlet [x = 1, y = x] = [2];    // x=2; y=2\nlet [x = 1, y = x] = [1, 2]; // x=1; y=2\nlet [x = y, y = 1] = [];     // ReferenceError: y is not defined\n")])])]),e("p",[a._v("上面最后一个表达式之所以会报错，是因为 "),e("strong",[a._v("x")]),a._v(" 用 "),e("strong",[a._v("y")]),a._v(" 做默认值时，"),e("strong",[a._v("y")]),a._v(" 还没有声明。")]),a._v(" "),e("hr"),a._v(" "),e("br"),a._v(" "),e("h1",{attrs:{id:"_2-对象的解构赋值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象的解构赋值"}},[a._v("#")]),a._v(" 2. 对象的解构赋值")]),a._v(" "),e("p",[a._v("解构不仅可以用于数组，还可以用于对象。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let { foo, bar} = { foo: 'aaa', bar: 'bbb'};\nfoo     // 'aaa'\nbar     // 'bbb'\n")])])]),e("p",[a._v("对象的解构与数组有一个重要的不同，数组的元素是按照次序排列的，变量的取值由他的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('let { bar, foo } = { foo: "aaa", bar: "bbb" };\nfoo // "aaa"\nbar // "bbb"\n\nlet { baz } = { foo: "aaa", bar: "bbb" };\nbaz // undefined\n')])])]),e("p",[a._v("上面代码的第一例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对于取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于 "),e("strong",[a._v("undefined")])]),a._v(" "),e("p",[a._v("如果变量名与属性名不一致，必须写成下面这样。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let { foo: baz } = { foo: 'aaa', bar: 'bbb'};\nbaz     // 'aaa'\n\nlet obj = { first: 'hello', last: 'world' };\nlet { first: f, last: l } = obj;\nf   // 'hello'\nl   // 'world'\n")])])]),e("p",[a._v("这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('let { foo: foo, bar: bar } = { foo: "aaa", bar: "bbb" };\n')])])]),e("p",[a._v("也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋值给对应的变量。真正被赋值的是后者，而不是前者")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('let { foo: baz } = { foo: "aaa", bar: "bbb" };\nbaz // "aaa"\nfoo // error: foo is not defined\n')])])]),e("p",[a._v("上面代码中，"),e("strong",[a._v("foo")]),a._v(" 是匹配的模式， "),e("strong",[a._v("baz")]),a._v(" 才是变量，真正被赋值的是变量 "),e("strong",[a._v("baz")]),a._v("，而不是模式 "),e("strong",[a._v("foo")]),a._v("。")]),a._v(" "),e("p",[a._v("与数组一样，解构也可以用于嵌套解构的对象。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let obj = {\n    p: ['hello', { y: 'world' }]\n};\nlet { p: [x, { y }] } = obj;\nx // \"Hello\"\ny // \"World\"\n")])])]),e("p",[a._v("注意， 这时 "),e("strong",[a._v("p")]),a._v(" 是模式，不是变量，因此不会被赋值。如果 "),e("strong",[a._v("p")]),a._v(" 也要作为变量赋值，可以写成下面这样")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('let obj = {\n  p: [\n    \'Hello\',\n    { y: \'World\' }\n  ]\n};\n\nlet { p, p: [x, { y }] } = obj;\nx // "Hello"\ny // "World"\np // ["Hello", {y: "World"}]\n')])])]),e("br"),a._v(" "),e("p",[a._v("下面是另一个例子。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const node = {\n  loc: {\n    start: {\n      line: 1,\n      column: 5\n    }\n  }\n};\n\nlet { loc, loc: { start }, loc: { start: { line }} } = node;\nline // 1\nloc  // Object {start: Object}\nstart // Object {line: 1, column: 5}\n")])])]),e("p",[a._v("上面代码有三次解构赋值，分别是对 "),e("strong",[a._v("loc")]),a._v("、 "),e("strong",[a._v("start")]),a._v("、"),e("strong",[a._v("line")]),a._v(" 三个属性的解构赋值。注意，最后一次对 "),e("strong",[a._v("line")]),a._v(" 属性的解构赋值之中，只有 "),e("strong",[a._v("line")]),a._v(" 是变量， "),e("strong",[a._v("loc")]),a._v(" 和 "),e("strong",[a._v("start")]),a._v(" 都是模式，不是变量。")]),a._v(" "),e("br"),a._v("\n下面是嵌套赋值的例子。\n"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let obj = {};\nlet arr = [];\n\n({ foo: obj.prop, bar: arr[0] }) = { foo: '123', bar: 'true'}\nobj     // { prop: '123' }\narr     // [ true ]\n")])])]),e("p",[a._v("对象的解构也可以指定默认值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var {x = 3} = {};\nx   // 3\n\nvar {x, y = 5} = {x: 1};\nx // 1\ny // 5\n\nvar {x: y = 3} = {};\ny // 3\n\nvar {x: y = 3} = {x: 5};\ny // 5\n\nvar { message: msg = 'Something went wrong' } = {};\nmsg // \"Something went wrong\"\n")])])]),e("p",[a._v("默认值生效的条件是，对象的属性值严格等于 "),e("strong",[a._v("undefined")]),a._v("。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var {x = 3} = {x: undefined};\nx // 3\n\nvar {x = 3} = {x: null};\nx // null\n")])])]),e("p",[a._v("上面代码中，属性 "),e("strong",[a._v("x")]),a._v(" 等于 "),e("strong",[a._v("null")]),a._v("，因为 "),e("strong",[a._v("null")]),a._v(" 与 "),e("strong",[a._v("undefined")]),a._v(" 不严格相等，所以是个有效的赋值，导致默认值 "),e("strong",[a._v("3")]),a._v(" 不会生效。")]),a._v(" "),e("p",[a._v("如果解构失败，变量的值等于 "),e("strong",[a._v("undefined")]),a._v(" 。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let {foo} = {bar: 'baz'};\nfoo // undefined\n")])])]),e("p",[a._v("如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 报错\nlet { foo: {bar}} = {baz: 'baz'}\n")])])]),e("p",[a._v("上面代码中，等号左边对象的 "),e("strong",[a._v("foo")]),a._v(" 属性，对应一个子对象。该子对象的 "),e("strong",[a._v("bar")]),a._v(" 属性，解构时会报错。原因很简单，因为 "),e("strong",[a._v("foo")]),a._v(" 这时等于 "),e("strong",[a._v("undefined")]),a._v("，再取子属性就会报错，请看下面的代码。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let _tmp = { baz: 'baz' };\n_tmp.foo.bar    // 报错\n")])])]),e("p",[a._v("如果要将一个已经声明的变量用于解构赋值，必须非常小心。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 错误的写法\nlet x;\n{x} = {x: 1};\n// SyntaxError: syntax error\n")])])]),e("p",[a._v("上面代码的写法会报错，因为 JavaScript 引擎会将{x}理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 正确的写法\nlet x;\n({x} = {x: 1});\n")])])]),e("p",[a._v("上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。")]),a._v(" "),e("p",[a._v("解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("({} = [true, false]);\n({} = 'abc');\n({} = []);\n")])])]),e("p",[a._v("上面的表达式虽然毫无意义，但是语法是合法的，可以执行。")]),a._v(" "),e("p",[a._v("对象的解构赋值，可以很方便地将现有对象的方法，赋值给某个变量。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let { log, sin, cos } = Math;\n")])])]),e("p",[a._v("上面代码将 "),e("strong",[a._v("Math")]),a._v(" 对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。")]),a._v(" "),e("p",[a._v("由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let arr = [1, 2, 3];\nlet {0 : first, [arr.length - 1] : last} = arr;\nfirst // 1\nlast // 3\n")])])]),e("p",[a._v("上面代码对数组进行对象解构。数组 "),e("strong",[a._v("arr")]),a._v(" 的 "),e("strong",[a._v("0")]),a._v(" 键对应的值是 "),e("strong",[a._v("1")]),a._v("，"),e("strong",[a._v("[arr.length - 1]")]),a._v(" 就是 "),e("strong",[a._v("2")]),a._v(" 键，对应的值是 "),e("strong",[a._v("3")]),a._v(" 。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。")]),a._v(" "),e("hr"),a._v(" "),e("br"),a._v(" "),e("h1",{attrs:{id:"_3-字符串的解构赋值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-字符串的解构赋值"}},[a._v("#")]),a._v(" 3. 字符串的解构赋值")]),a._v(" "),e("p",[a._v("字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('const [a, b, c, d, e] = \'hello\';\na // "h"\nb // "e"\nc // "l"\nd // "l"\ne // "o"\n')])])]),e("p",[a._v("类似数组的对象都有一个 "),e("strong",[a._v("length")]),a._v(" 属性，因此还可以对这个属性解构赋值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let {length : len} = 'hello';\nlen // 5\n")])])]),e("hr"),a._v(" "),e("br"),a._v(" "),e("h1",{attrs:{id:"_4-数值和布尔值的解构赋值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-数值和布尔值的解构赋值"}},[a._v("#")]),a._v(" 4. 数值和布尔值的解构赋值")]),a._v(" "),e("p",[a._v("解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let {toString: s} = 123;\ns === Number.prototype.toString // true\n\nlet {toString: s} = true;\ns === Boolean.prototype.toString // true\n")])])]),e("p",[a._v("上面代码中，数值和布尔值的包装对象都有 "),e("strong",[a._v("toString")]),a._v(" 属性。因此变量 "),e("strong",[a._v("s")]),a._v(" 都能取到值。")]),a._v(" "),e("p",[a._v("解构赋值的规则是。只要等号右边的值不是对象或数组，就先将其转为对象。由于 "),e("strong",[a._v("undefined")]),a._v(" 和 "),e("strong",[a._v("null")]),a._v(" 无法转为对象，所以对他们进行结构赋值都会报错")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let { prop: x } = undefined; // TypeError\nlet { prop: y } = null; // TypeError\n")])])]),e("p",[a._v("如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。")]),a._v(" "),e("hr"),a._v(" "),e("br"),a._v(" "),e("h1",{attrs:{id:"_5-函数参数的解构赋值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-函数参数的解构赋值"}},[a._v("#")]),a._v(" 5. 函数参数的解构赋值")]),a._v(" "),e("p",[a._v("函数的参数也可以使用解构赋值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function add([x,y]) {\n    return x + y;\n}\n\nadd([1,2])\n")])])]),e("p",[a._v("上面代码中，函数 "),e("strong",[a._v("add")]),a._v(" 的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量 "),e("strong",[a._v("x")]),a._v(" 和 "),e("strong",[a._v("y")]),a._v("。对于函数内部的diam来说，他们能感受到的参数就是 "),e("strong",[a._v("x")]),a._v(" 和 "),e("strong",[a._v("y")]),a._v("。")]),a._v(" "),e("p",[a._v("下面是另一个例子")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[[1, 2], [3, 4]].map(([a,b]) => a + b);\n// [3, 7]\n")])])]),e("p",[a._v("函数参数的解构也可以使用默认值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function move({ x = 0, y = 0} = {}) {\n    return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n")])])]),e("p",[a._v("上面代码中，函数 "),e("strong",[a._v("move")]),a._v(" 的参数是一个对象，通过对这个对象进行解构，通过对这个对象进行解构，得到变量 "),e("strong",[a._v("x")]),a._v(" 和 "),e("strong",[a._v("y")]),a._v(" 的值，如果解构失败，"),e("strong",[a._v("x")]),a._v(" 和 "),e("strong",[a._v("y")]),a._v(" 等于默认值。")]),a._v(" "),e("p",[a._v("注意， 下面写法会得到不一样的结果")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function move({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, undefined]\nmove({}); // [undefined, undefined]\nmove(); // [0, 0]\n")])])]),e("p",[a._v("上面的代码是为函数 "),e("strong",[a._v("move")]),a._v(" 的参数指定默认值，而不是为变量 "),e("strong",[a._v("x")]),a._v(" 和 "),e("strong",[a._v("y")]),a._v(" 指定默认值，所以会得到前一种写法不同的结果。")]),a._v(" "),e("p",[e("strong",[a._v("undefined")]),a._v(" 就会触发函数参数的默认值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[1, undefined, 3].map((x = 'yes') => x);\n// [ 1, 'yes', 3 ]\n")])])]),e("hr"),a._v(" "),e("br"),a._v(" "),e("h1",{attrs:{id:"_6-圆括号问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-圆括号问题"}},[a._v("#")]),a._v(" 6. 圆括号问题")]),a._v(" "),e("p",[a._v("解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式、还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。")]),a._v(" "),e("p",[a._v("由此带来的问题是，如果模式中出现圆括号怎么处理。ES6的规则是，只要有可能导致解构的歧义，就不得使用圆括号。")]),a._v(" "),e("p",[a._v("但是这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。")]),a._v(" "),e("h2",{attrs:{id:"不能使用圆括号的情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不能使用圆括号的情况"}},[a._v("#")]),a._v(" 不能使用圆括号的情况")]),a._v(" "),e("p",[a._v("以下三种解构赋值不得使用圆括号。")]),a._v(" "),e("p",[a._v("（1） 变量声明语句")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 全部报错\nlet [(a)] = [1];\n\nlet {x: (c)} = {};\nlet ({x: c}) = {};\nlet {(x: c)} = {};\nlet {(x): c} = {};\n\nlet { o: ({ p: p }) } = { o: { p: 2 } };\n")])])]),e("p",[a._v("以上 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。")]),a._v(" "),e("br"),a._v(" "),e("br"),a._v("\n（2） 函数参数\n函数参数也属于变量声明，因此不能带有圆括号。\n"),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 报错\nfunction f([(z)]) { return z; }\n// 报错\nfunction f([z,(x)]) { return x; }\n")])])]),e("br"),a._v(" "),e("br"),a._v(" "),e("p",[a._v("（3） 赋值语句的模式")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 全部报错\n({ p: a }) = { p: 42 };\n([a]) = [5];\n")])])]),e("p",[a._v("上面代码将整个模式放在圆括号之中，导致报错\n"),e("br"),a._v(" "),e("br")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 报错\n[({p: a}), {x: c}] = [{}, {}];\n")])])]),e("p",[a._v("上面代码将一部分模式放在圆括号之中，导致报错")]),a._v(" "),e("h2",{attrs:{id:"可以使用圆括号的情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可以使用圆括号的情况"}},[a._v("#")]),a._v(" 可以使用圆括号的情况")]),a._v(" "),e("p",[a._v("可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[(b)] = [3]; // 正确\n({ p: (d) } = {}); // 正确\n[(parseInt.prop)] = [3]; // 正确\n")])])]),e("p",[a._v("上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，与圆括号无关;第二行语句中，模式是 "),e("strong",[a._v("p")]),a._v("，而不是 "),e("strong",[a._v("d")]),a._v("；第三行语句与第一行语句的性质一致。")]),a._v(" "),e("h1",{attrs:{id:"_7-用途"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-用途"}},[a._v("#")]),a._v(" 7. 用途")]),a._v(" "),e("p",[a._v("变量的解构赋值用途很多。")]),a._v(" "),e("h4",{attrs:{id:"_1-交换变量的值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-交换变量的值"}},[a._v("#")]),a._v(" （1）交换变量的值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let x = 1;\nlet y = 2;\n\n[x, y] = [y, x];\n")])])]),e("p",[a._v("上面代码交换 "),e("strong",[a._v("x")]),a._v(" 和 "),e("strong",[a._v("y")]),a._v(" 的值，这样的写法不仅简洁，而且易读，语义非常清晰。")]),a._v(" "),e("h4",{attrs:{id:"_2-从函数返回多个值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-从函数返回多个值"}},[a._v("#")]),a._v(" （2）从函数返回多个值")]),a._v(" "),e("p",[a._v("函数只能返回一个值，如果要返回多个值，只能将他们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 返回一个数组\n\nfunction example() {\n    return [1, 2, 3];\n}\nlet [a, b, c] = example()\n\n// 返回一个对象\nfunction example() {\n    return {\n        foo: 1,\n        bar: 2\n    };\n}\nlet {foo, bar} = example()\n")])])]),e("h4",{attrs:{id:"_3-函数参数的定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-函数参数的定义"}},[a._v("#")]),a._v(" （3）函数参数的定义")]),a._v(" "),e("p",[a._v("解构赋值可以方便地将一组参数与变量名对应起来。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3])\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n")])])]),e("h4",{attrs:{id:"_4-提取json数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-提取json数据"}},[a._v("#")]),a._v(" （4）提取JSON数据")]),a._v(" "),e("p",[a._v("解构赋值对提取JSON对象中的数据，尤其有用")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let jsonData = {\n   id: 42,\n   status: 'OK',\n   data: [867, 5309]\n};\n\nlet {id, status, data: number} = jsonData\n\nconsole.log(id, status, number);\n// 42, \"OK\", [867, 5309]\n")])])]),e("p",[a._v("上面代码可以快速提取JSON数据的值。")]),a._v(" "),e("h4",{attrs:{id:"_5-函数参数的默认值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-函数参数的默认值"}},[a._v("#")]),a._v(" （5）函数参数的默认值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jQuery.ajax = function (url, {\n    async = true,\n    beforeSend = function () {},\n    cache = true,\n    complete = function () {},\n    crossDomain = false,\n    global = true,\n    // ... more config\n} = {}) {\n    // ... do stuff  \n};\n")])])]),e("p",[a._v("指定参数的默认值，就避免了再函数体内部在写 "),e("code",[a._v("var foo = config.foo || 'default foo'")]),a._v(" ; 这样的语句。")]),a._v(" "),e("h4",{attrs:{id:"_6-遍历map结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-遍历map结构"}},[a._v("#")]),a._v(" （6）遍历Map结构")]),a._v(" "),e("p",[a._v("任何部署了Iterator接口的对象，都可以用 "),e("strong",[a._v("for...of")]),a._v(" 循环遍历。Map结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const map = new Map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n    console.log(key + \" is \" + value);\n}\n\n// first is hello\n// second is world\n\n")])])]),e("p",[a._v("如果只想获取键名，或者只想获取键值，可以写成下面这样。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [,value] of map) {\n  // ...\n}\n")])])]),e("h4",{attrs:{id:"_7-输入模块的指定方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-输入模块的指定方法"}},[a._v("#")]),a._v(" （7）输入模块的指定方法")]),a._v(" "),e("p",[a._v("加载模块时，往往需要指定输入那些方法。解构赋值使得语句非常清晰。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('const { SourceMapConsumer, SourceNode } = require("source-map");\n')])])])])}),[],!1,null,null,null);t.default=n.exports}}]);