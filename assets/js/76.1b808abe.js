(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{551:function(e,t,r){"use strict";r.r(t);var s=r(42),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"_6-数值的扩展"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-数值的扩展"}},[e._v("#")]),e._v(" 6. 数值的扩展")]),e._v(" "),r("blockquote",[r("ol",[r("li",[e._v("二进制和八进制表示法")]),e._v(" "),r("li",[e._v("Number.isFinite(), Number.isNaN()")]),e._v(" "),r("li",[e._v("Number.parseInt(), Number.parseFloat()")]),e._v(" "),r("li",[e._v("Number.isInteger()")]),e._v(" "),r("li",[e._v("Number.EPSILON")]),e._v(" "),r("li",[e._v("安全整数和 Number.isSafeInteger()")]),e._v(" "),r("li",[e._v("Math 对象的扩展")]),e._v(" "),r("li",[e._v("指数运算符")])])]),e._v(" "),r("hr"),e._v(" "),r("br"),e._v(" "),r("h1",{attrs:{id:"_1-二进制和八进制表示法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-二进制和八进制表示法"}},[e._v("#")]),e._v(" 1. 二进制和八进制表示法")]),e._v(" "),r("p",[e._v("ES6 提供了二进制和八进制数值的新的写法，分别用前缀 "),r("strong",[e._v("0b")]),e._v(" （或 "),r("strong",[e._v("0B")]),e._v("）和 "),r("strong",[e._v("0o")]),e._v(" （或 "),r("strong",[e._v("0O")]),e._v("）表示。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("0b111110111 === 503 // true\n0o767 === 503 // true\n")])])]),r("p",[e._v("从 ES5 开始，在严格模式之中，八进制就不再允许使用前缀 "),r("strong",[e._v("0")]),e._v(" 表示，ES6 进一步明确，要使用前缀 "),r("strong",[e._v("0o")]),e._v(" 表示。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 非严格模式\n(function () {\n    console.log(0o === 011);\n})() // true\n\n\n//严格模式\n(function () {\n    'use Strict';\n    console.log(0o === 011);\n})() // Uncaught SyntaxError: Octal literals are not allowed in strict mode.\n")])])]),r("p",[e._v("如果要将 "),r("strong",[e._v("0b")]),e._v(" 和 "),r("strong",[e._v("0o")]),e._v(" 前缀的字符串数值转为十进制，要使用 "),r("strong",[e._v("Number")]),e._v(" 方法。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("Number('0b111')  // 7\nNumber('0o10')  // 8\n")])])]),r("hr"),e._v(" "),r("br"),e._v(" "),r("h1",{attrs:{id:"_2-number-isfinite-number-isnan"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-number-isfinite-number-isnan"}},[e._v("#")]),e._v(" 2. Number.isFinite(), Number.isNaN()")]),e._v(" "),r("p",[e._v("ES6 在 "),r("strong",[e._v("Number")]),e._v(" 对象上，新提供了 "),r("strong",[e._v("Number.isFinite()")]),e._v(" 和 Number.isNaN() 两个方法。")]),e._v(" "),r("p",[r("strong",[e._v("Number.isFinite()")]),e._v(" 用来检查一个数值是否为有限的 (finite), 即不是 "),r("strong",[e._v("Infinity")]),e._v("。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("Number.isFinite(15); // true\nNumber.isFinite(0.8); // true\nNumber.isFinite(NaN); // false\nNumber.isFinite(Infinity); // false\nNumber.isFinite(-Infinity); // false\nNumber.isFinite('foo'); // false\nNumber.isFinite('15'); // false\nNumber.isFinite(true); // false\n")])])]),r("p",[e._v("注意， 如果参数类型不是数值， "),r("strong",[e._v("Number.isFinite")]),e._v(" 一律返回 false。")]),e._v(" "),r("p",[r("strong",[e._v("Number.isNaN()")]),e._v(" 用来检查一个值是否为 "),r("strong",[e._v("NaN")]),e._v("。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("Number.isNaN(NaN) // true\nNumber.isNaN(15) // false\nNumber.isNaN('15') // false\nNumber.isNaN(true) // false\nNumber.isNaN(9/NaN) // true\nNumber.isNaN('true' / 0) // true\nNumber.isNaN('true' / 'true') // true\n")])])]),r("p",[e._v("如果参数类型不是 "),r("strong",[e._v("NaN")]),e._v("，"),r("strong",[e._v("Number.isNaN")]),e._v(" 一律返回 "),r("strong",[e._v("false")]),e._v("。")]),e._v(" "),r("p",[e._v("它们与传统的全局方法")]),e._v(" "),r("p",[r("strong",[e._v("isFinite()")]),e._v(" 和 "),r("strong",[e._v("isNaN()")]),e._v(" 的区别在于，传统方法先调用 "),r("strong",[e._v("Number()")]),e._v(" 将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效， "),r("strong",[e._v("Number.isFinite()")]),e._v("  对于非数值一律返回 "),r("strong",[e._v("false")]),e._v("， "),r("strong",[e._v("Number.isNaN()")]),e._v(" 只有对于 "),r("strong",[e._v("NaN")]),e._v(" 才返回 "),r("strong",[e._v("true")]),e._v("，非 "),r("strong",[e._v("NaN")]),e._v(" 一律返回 "),r("strong",[e._v("false。")])]),e._v(" "),r("h1",{attrs:{id:"_3-number-parseint-number-parsefloat"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-number-parseint-number-parsefloat"}},[e._v("#")]),e._v(" 3. Number.parseInt(), Number.parseFloat()")])])}),[],!1,null,null,null);t.default=a.exports}}]);